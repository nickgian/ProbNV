include "columbus_control.nv"

symbolic b0: bool = | true -> 0.05p | false -> 0.95p
symbolic b1: bool = | true -> 0.05p | false -> 0.95p
symbolic b2: bool = | true -> 0.05p | false -> 0.95p
symbolic b3: bool = | true -> 0.05p | false -> 0.95p
symbolic b4: bool = | true -> 0.05p | false -> 0.95p
symbolic b5: bool = | true -> 0.05p | false -> 0.95p
symbolic b6: bool = | true -> 0.05p | false -> 0.95p
symbolic b7: bool = | true -> 0.05p | false -> 0.95p
symbolic b8: bool = | true -> 0.05p | false -> 0.95p
symbolic b9: bool = | true -> 0.05p | false -> 0.95p
symbolic b10: bool = | true -> 0.05p | false -> 0.95p
symbolic b11: bool = | true -> 0.05p | false -> 0.95p
symbolic b12: bool = | true -> 0.05p | false -> 0.95p
symbolic b13: bool = | true -> 0.05p | false -> 0.95p
symbolic b14: bool = | true -> 0.05p | false -> 0.95p
symbolic b15: bool = | true -> 0.05p | false -> 0.95p
symbolic b16: bool = | true -> 0.05p | false -> 0.95p
symbolic b17: bool = | true -> 0.05p | false -> 0.95p
symbolic b18: bool = | true -> 0.05p | false -> 0.95p
symbolic b19: bool = | true -> 0.05p | false -> 0.95p
symbolic b20: bool = | true -> 0.05p | false -> 0.95p
symbolic b21: bool = | true -> 0.05p | false -> 0.95p
symbolic b22: bool = | true -> 0.05p | false -> 0.95p
symbolic b23: bool = | true -> 0.05p | false -> 0.95p
symbolic b24: bool = | true -> 0.05p | false -> 0.95p
symbolic b25: bool = | true -> 0.05p | false -> 0.95p
symbolic b26: bool = | true -> 0.05p | false -> 0.95p
symbolic b27: bool = | true -> 0.05p | false -> 0.95p
symbolic b28: bool = | true -> 0.05p | false -> 0.95p
symbolic b29: bool = | true -> 0.05p | false -> 0.95p
symbolic b30: bool = | true -> 0.05p | false -> 0.95p
symbolic b31: bool = | true -> 0.05p | false -> 0.95p
symbolic b32: bool = | true -> 0.05p | false -> 0.95p
symbolic b33: bool = | true -> 0.05p | false -> 0.95p
symbolic b34: bool = | true -> 0.05p | false -> 0.95p
symbolic b35: bool = | true -> 0.05p | false -> 0.95p
symbolic b36: bool = | true -> 0.05p | false -> 0.95p
symbolic b37: bool = | true -> 0.05p | false -> 0.95p
symbolic b38: bool = | true -> 0.05p | false -> 0.95p
symbolic b39: bool = | true -> 0.05p | false -> 0.95p
symbolic b40: bool = | true -> 0.05p | false -> 0.95p
symbolic b41: bool = | true -> 0.05p | false -> 0.95p
symbolic b42: bool = | true -> 0.05p | false -> 0.95p
symbolic b43: bool = | true -> 0.05p | false -> 0.95p
symbolic b44: bool = | true -> 0.05p | false -> 0.95p
symbolic b45: bool = | true -> 0.05p | false -> 0.95p
symbolic b46: bool = | true -> 0.05p | false -> 0.95p
symbolic b47: bool = | true -> 0.05p | false -> 0.95p
symbolic b48: bool = | true -> 0.05p | false -> 0.95p
symbolic b49: bool = | true -> 0.05p | false -> 0.95p
symbolic b50: bool = | true -> 0.05p | false -> 0.95p
symbolic b51: bool = | true -> 0.05p | false -> 0.95p
symbolic b52: bool = | true -> 0.05p | false -> 0.95p
symbolic b53: bool = | true -> 0.05p | false -> 0.95p
symbolic b54: bool = | true -> 0.05p | false -> 0.95p
symbolic b55: bool = | true -> 0.05p | false -> 0.95p
symbolic b56: bool = | true -> 0.05p | false -> 0.95p
symbolic b57: bool = | true -> 0.05p | false -> 0.95p
symbolic b58: bool = | true -> 0.05p | false -> 0.95p
symbolic b59: bool = | true -> 0.05p | false -> 0.95p
symbolic b60: bool = | true -> 0.05p | false -> 0.95p
symbolic b61: bool = | true -> 0.05p | false -> 0.95p
symbolic b62: bool = | true -> 0.05p | false -> 0.95p
symbolic b63: bool = | true -> 0.05p | false -> 0.95p
symbolic b64: bool = | true -> 0.05p | false -> 0.95p
symbolic b65: bool = | true -> 0.05p | false -> 0.95p
symbolic b66: bool = | true -> 0.05p | false -> 0.95p
symbolic b67: bool = | true -> 0.05p | false -> 0.95p
symbolic b68: bool = | true -> 0.05p | false -> 0.95p
symbolic b69: bool = | true -> 0.05p | false -> 0.95p
symbolic b70: bool = | true -> 0.05p | false -> 0.95p
symbolic b71: bool = | true -> 0.05p | false -> 0.95p
symbolic b72: bool = | true -> 0.05p | false -> 0.95p
symbolic b73: bool = | true -> 0.05p | false -> 0.95p
symbolic b74: bool = | true -> 0.05p | false -> 0.95p
symbolic b75: bool = | true -> 0.05p | false -> 0.95p
symbolic b76: bool = | true -> 0.05p | false -> 0.95p
symbolic b77: bool = | true -> 0.05p | false -> 0.95p
symbolic b78: bool = | true -> 0.05p | false -> 0.95p
symbolic b79: bool = | true -> 0.05p | false -> 0.95p
symbolic b80: bool = | true -> 0.05p | false -> 0.95p
symbolic b81: bool = | true -> 0.05p | false -> 0.95p
symbolic b82: bool = | true -> 0.05p | false -> 0.95p
symbolic b83: bool = | true -> 0.05p | false -> 0.95p
symbolic b84: bool = | true -> 0.05p | false -> 0.95p
symbolic b85: bool = | true -> 0.05p | false -> 0.95p

let isFailed u = 
  match u with
  | 0n -> b0
  | 1n -> b1
  | 2n -> b2
  | 3n -> b3
  | 4n -> b4
  | 5n -> b5
  | 6n -> b6
  | 7n -> b7
  | 8n -> b8
  | 9n -> b9
  | 10n -> b10
  | 11n -> b11
  | 12n -> b12
  | 13n -> b13
  | 14n -> b14
  | 15n -> b15
  | 16n -> b16
  | 17n -> b17
  | 18n -> b18
  | 19n -> b19
  | 20n -> b20
  | 21n -> b21
  | 22n -> b22
  | 23n -> b23
  | 24n -> b24
  | 25n -> b25
  | 26n -> b26
  | 27n -> b27
  | 28n -> b28
  | 29n -> b29
  | 30n -> b30
  | 31n -> b31
  | 32n -> b32
  | 33n -> b33
  | 34n -> b34
  | 35n -> b35
  | 36n -> b36
  | 37n -> b37
  | 38n -> b38
  | 39n -> b39
  | 40n -> b40
  | 41n -> b41
  | 42n -> b42
  | 43n -> b43
  | 44n -> b44
  | 45n -> b45
  | 46n -> b46
  | 47n -> b47
  | 48n -> b48
  | 49n -> b49
  | 50n -> b50
  | 51n -> b51
  | 52n -> b52
  | 53n -> b53
  | 54n -> b54
  | 55n -> b55
  | 56n -> b56
  | 57n -> b57
  | 58n -> b58
  | 59n -> b59
  | 60n -> b60
  | 61n -> b61
  | 62n -> b62
  | 63n -> b63
  | 64n -> b64
  | 65n -> b65
  | 66n -> b66
  | 67n -> b67
  | 68n -> b68
  | 69n -> b69
  | 70n -> b70
  | 71n -> b71
  | 72n -> b72
  | 73n -> b73
  | 74n -> b74
  | 75n -> b75
  | 76n -> b76
  | 77n -> b77
  | 78n -> b78
  | 79n -> b79
  | 80n -> b80
  | 81n -> b81
  | 82n -> b82
  | 83n -> b83
  | 84n -> b84
  | 85n -> b85

let mergeNodeFaults u (x : [M]attribute) (y : [M]attribute) =
  merge u x y

let transNodeFaults d e (x : [M]attribute) =
  if (match e with | a~b -> isFailed b) then
    {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  else trans d e x

let initNodeFaults d u = 
  if isFailed u then
    {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  else init d u

let d = (200.2.73.0/24)

let nodeFaults = solution(initNodeFaults d, transNodeFaults d, mergeNodeFaults)
let reachable u =
  match nodeFaults[u].selected with | None -> false | _ -> true

assert(reachable 1n, 0.99p)
assert(reachable 2n, 0.99p)
assert(reachable 3n, 0.99p)
assert(reachable 4n, 0.99p)
assert(reachable 5n, 0.99p)
assert(reachable 6n, 0.99p)
assert(reachable 7n, 0.99p)
assert(reachable 8n, 0.99p)
assert(reachable 9n, 0.99p)
assert(reachable 10n, 0.99p)
assert(reachable 11n, 0.99p)
assert(reachable 12n, 0.99p)
assert(reachable 13n, 0.99p)
assert(reachable 14n, 0.99p)
assert(reachable 15n, 0.99p)
assert(reachable 16n, 0.99p)
assert(reachable 17n, 0.99p)
assert(reachable 18n, 0.99p)
assert(reachable 19n, 0.99p)
assert(reachable 20n, 0.99p)
assert(reachable 21n, 0.99p)
assert(reachable 22n, 0.99p)
assert(reachable 23n, 0.99p)
assert(reachable 24n, 0.99p)
assert(reachable 25n, 0.99p)
assert(reachable 26n, 0.99p)
assert(reachable 27n, 0.99p)
assert(reachable 28n, 0.99p)
assert(reachable 29n, 0.99p)
assert(reachable 30n, 0.99p)
assert(reachable 31n, 0.99p)
assert(reachable 32n, 0.99p)
assert(reachable 33n, 0.99p)
assert(reachable 34n, 0.99p)
assert(reachable 35n, 0.99p)
assert(reachable 36n, 0.99p)
assert(reachable 37n, 0.99p)
assert(reachable 38n, 0.99p)
assert(reachable 39n, 0.99p)
assert(reachable 40n, 0.99p)
assert(reachable 41n, 0.99p)
assert(reachable 42n, 0.99p)
assert(reachable 43n, 0.99p)
assert(reachable 44n, 0.99p)
assert(reachable 45n, 0.99p)
assert(reachable 46n, 0.99p)
assert(reachable 47n, 0.99p)
assert(reachable 48n, 0.99p)
assert(reachable 49n, 0.99p)
assert(reachable 50n, 0.99p)
assert(reachable 51n, 0.99p)
assert(reachable 52n, 0.99p)
assert(reachable 53n, 0.99p)
assert(reachable 54n, 0.99p)
assert(reachable 55n, 0.99p)
assert(reachable 56n, 0.99p)
assert(reachable 57n, 0.99p)
assert(reachable 58n, 0.99p)
assert(reachable 59n, 0.99p)
assert(reachable 60n, 0.99p)
assert(reachable 61n, 0.99p)
assert(reachable 62n, 0.99p)
assert(reachable 63n, 0.99p)
assert(reachable 64n, 0.99p)
assert(reachable 65n, 0.99p)
assert(reachable 66n, 0.99p)
assert(reachable 67n, 0.99p)
assert(reachable 68n, 0.99p)
assert(reachable 69n, 0.99p)
assert(reachable 70n, 0.99p)
assert(reachable 71n, 0.99p)
assert(reachable 72n, 0.99p)
assert(reachable 73n, 0.99p)
assert(reachable 74n, 0.99p)
assert(reachable 75n, 0.99p)
assert(reachable 76n, 0.99p)
assert(reachable 77n, 0.99p)
assert(reachable 78n, 0.99p)
assert(reachable 79n, 0.99p)
assert(reachable 80n, 0.99p)
assert(reachable 81n, 0.99p)
assert(reachable 82n, 0.99p)
assert(reachable 83n, 0.99p)
assert(reachable 84n, 0.99p)
assert(reachable 85n, 0.99p)
