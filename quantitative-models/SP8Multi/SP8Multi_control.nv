(* models bgp, ospf, static routes, nexthop, multipath *)

type prefix = (int, int6) (* IP prefix; tuple of (address, length) *)
type ospfType = {ospfAd: int8; weight: int16; areaType:int2; areaId: int; ospfNextHop: set[tedge];}
type bgpType = {bgpAd: int8; lp: int; aslen: int; med:int; comms:set[int]; bgpNextHop: set[tedge];}
type rib = {
    connected:option[int8]; (* Just track administrative distance *)
    static:option[int8]; (* Just track administrative distance *)
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int2]; (* Which protocol has the best route *) }
type attribute = rib

(* Definitions for the "best" field *)
let p_CONNECTED = 0u2
let p_STATIC = 1u2
let p_OSPF = 2u2
let p_BGP = 3u2

(** Useful helper definitions **)

let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE1 = 2u2
let ospfE2 = 3u2

(* Check if the selected protocol is x *)
let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y

let flipEdge e = 
  match e with  | a~b -> toEdge b a

let getSourceNode e = 
  match e with  | a~b -> a

let min x y = x <u8 y

(* Compute the better of x and y according to f *)
(* Return a boolean (true for x, false for y) for efficiency reasons *)
let pickOption f x y =
  match (x,y) with
  | (None, _) -> false  | (_, None) -> true
  | (Some a, Some b) -> f a b

let pickMinOption = pickOption min

let union (s1 : [C]dict[[C]tedge, [C]bool]) (s2 : [C]dict[[C]tedge, [C]bool]) = combine (fun x y -> x || y) s1 s2

(* OSPF Route ranking: first compare areas, then weights. 
  Multipath is applied by default if enabled during translation.*)
let betterOspf o1 o2 =
  if o1.areaType <u2 o2.areaType then o1
  else if o2.areaType <u2 o1.areaType then o2
  else if o1.weight <u16 o2.weight then o1
  else if o2.weight <u16 o1.weight then o2
  else {o1 with ospfNextHop = union o1.ospfNextHop o2.ospfNextHop}

let mergeOption f x y =
  match (x,y) with
  | (None, _) -> y  | (_, None) -> x
  | (Some a, Some b) -> Some (f a b)

(* BGP Route ranking: first compare local pref, then path length, then MED. 
       If multipath is disabled then tie-break is arbitrary (normally, the router id should be used) *)
let betterBgp multiPath b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2
  else if b1.med < b2.med then b1
  else if b1.med > b2.med then b2
  else if multiPath then {b1 with bgpNextHop = union b1.bgpNextHop b2.bgpNextHop}
  else b1

(* Determine which of the four protocols has the best route by comparing their ADs *)
let best c s o b =
  match (c,s,o,b) with
  (* If no protocol has a route, then we have no route at all *)
  | (None,None,None,None) -> None
  | _ -> 
      (* Otherwise, get administrative distances for osfp and bgp... *)
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      (* ...and figure out which of the protocols has the lowest AD *)
      let (x,p1) = if pickMinOption c s then (c,p_CONNECTED) else (s,p_STATIC) in
      let (y,p2) = if pickMinOption o b then (o,p_OSPF) else (b,p_BGP) in
      Some (if pickMinOption x y then p1 else p2)

(* Compute the best route for each protocol individually, then select the best one *)
let mergeValues bgpMultiPathEnabled x y =
  let c = if (pickMinOption x.connected y.connected) then x.connected else y.connected in
  let s = if (pickMinOption x.static y.static) then x.static else y.static in
  let o = mergeOption betterOspf x.ospf y.ospf in
  let b = mergeOption (betterBgp bgpMultiPathEnabled) x.bgp y.bgp in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y =
  mergeValues true x y

let init d node =
  match node with
  | 52n -> 
    if d = (10.0.24.0/31) || d = (10.0.20.0/31) || d = (70.0.28.0/32) || d = (10.0.28.0/31) || d = (70.0.28.0/31) || d = (10.0.16.0/31) || d = (70.0.28.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.28.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 53n -> 
    if d = (10.0.21.0/31) || d = (10.0.17.0/31) || d = (70.0.29.0/32) || d = (10.0.29.0/31) || d = (10.0.25.0/31) || d = (70.0.29.0/31) || d = (70.0.29.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.29.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 50n -> 
    if d = (70.0.22.0/31) || d = (70.0.22.0/32) || d = (10.0.6.0/31) || d = (10.0.2.0/31) || d = (70.0.22.2/31) || d = (10.0.14.0/31) || d = (10.0.10.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.22.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 51n -> 
    if d = (70.0.23.0/31) || d = (70.0.23.0/32) || d = (10.0.7.0/31) || d = (10.0.3.0/31) || d = (70.0.23.2/31) || d = (10.0.15.0/31) || d = (10.0.11.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.23.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 72n -> 
    if d = (10.0.104.0/31) || d = (10.0.100.0/31) || d = (10.0.108.0/31) || d = (70.0.68.2/31) || d = (10.0.96.0/31) || d = (70.0.68.0/31) || d = (70.0.68.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.68.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 73n -> 
    if d = (10.0.105.0/31) || d = (10.0.101.0/31) || d = (10.0.109.0/31) || d = (70.0.69.2/31) || d = (10.0.97.0/31) || d = (70.0.69.0/31) || d = (70.0.69.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.69.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 29n -> 
    if d = (10.0.119.0/31) || d = (10.0.118.0/31) || d = (10.0.117.0/31) || d = (10.0.116.0/31) || d = (70.0.73.0/32) || d = (10.0.183.0/31) || d = (10.0.191.0/31) || d = (10.0.167.0/31) || d = (10.0.175.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 28n -> 
    if d = (10.0.115.0/31) || d = (10.0.114.0/31) || d = (10.0.113.0/31) || d = (10.0.112.0/31) || d = (70.0.72.0/32) || d = (10.0.151.0/31) || d = (10.0.159.0/31) || d = (10.0.135.0/31) || d = (10.0.143.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 70n -> 
    if d = (10.0.90.0/31) || d = (10.0.86.0/31) || d = (10.0.94.0/31) || d = (10.0.82.0/31) || d = (70.0.62.0/32) || d = (70.0.62.0/31) || d = (70.0.62.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.62.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 11n -> 
    if d = (10.0.250.0/31) || d = (10.0.234.0/31) || d = (10.0.242.0/31) || d = (10.0.226.0/31) || d = (10.0.47.0/31) || d = (10.0.46.0/31) || d = (10.0.45.0/31) || d = (10.0.44.0/31) || d = (70.0.35.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 71n -> 
    if d = (10.0.87.0/31) || d = (10.0.83.0/31) || d = (10.0.95.0/31) || d = (10.0.91.0/31) || d = (70.0.63.0/32) || d = (70.0.63.0/31) || d = (70.0.63.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.63.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 10n -> 
    if d = (10.0.218.0/31) || d = (10.0.202.0/31) || d = (10.0.210.0/31) || d = (10.0.194.0/31) || d = (10.0.41.0/31) || d = (10.0.40.0/31) || d = (10.0.43.0/31) || d = (10.0.42.0/31) || d = (70.0.34.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 48n -> 
    if d = (70.0.20.0/31) || d = (70.0.20.0/32) || d = (10.0.8.0/31) || d = (10.0.4.0/31) || d = (10.0.0.0/31) || d = (70.0.20.2/31) || d = (10.0.12.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.20.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 49n -> 
    if d = (70.0.21.0/31) || d = (70.0.21.0/32) || d = (10.0.5.0/31) || d = (10.0.1.0/31) || d = (70.0.21.2/31) || d = (10.0.13.0/31) || d = (10.0.9.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.21.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 31n -> 
    if d = (10.0.255.0/31) || d = (10.0.127.0/31) || d = (10.0.126.0/31) || d = (10.0.125.0/31) || d = (10.0.124.0/31) || d = (10.0.239.0/31) || d = (10.0.247.0/31) || d = (10.0.231.0/31) || d = (70.0.75.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 30n -> 
    if d = (10.0.123.0/31) || d = (10.0.122.0/31) || d = (10.0.121.0/31) || d = (10.0.120.0/31) || d = (10.0.215.0/31) || d = (10.0.223.0/31) || d = (10.0.199.0/31) || d = (10.0.207.0/31) || d = (70.0.74.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 68n -> 
    if d = (10.0.88.0/31) || d = (10.0.84.0/31) || d = (10.0.92.0/31) || d = (10.0.80.0/31) || d = (70.0.60.0/32) || d = (70.0.60.0/31) || d = (70.0.60.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.60.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 9n -> 
    if d = (10.0.186.0/31) || d = (10.0.170.0/31) || d = (10.0.39.0/31) || d = (10.0.38.0/31) || d = (10.0.37.0/31) || d = (10.0.36.0/31) || d = (10.0.178.0/31) || d = (70.0.33.0/32) || d = (10.0.162.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 69n -> 
    if d = (10.0.89.0/31) || d = (10.0.85.0/31) || d = (10.0.93.0/31) || d = (10.0.81.0/31) || d = (70.0.61.0/32) || d = (70.0.61.0/31) || d = (70.0.61.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.61.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 8n -> 
    if d = (10.0.130.0/31) || d = (10.0.35.0/31) || d = (10.0.34.0/31) || d = (10.0.154.0/31) || d = (70.0.32.0/32) || d = (10.0.33.0/31) || d = (10.0.32.0/31) || d = (10.0.138.0/31) || d = (10.0.146.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 57n -> 
    if d = (70.0.37.2/31) || d = (10.0.41.0/31) || d = (10.0.37.0/31) || d = (70.0.37.0/31) || d = (10.0.45.0/31) || d = (70.0.37.0/32) || d = (10.0.33.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.37.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 58n -> 
    if d = (70.0.38.2/31) || d = (10.0.38.0/31) || d = (10.0.34.0/31) || d = (70.0.38.0/31) || d = (10.0.46.0/31) || d = (10.0.42.0/31) || d = (70.0.38.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.38.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 59n -> 
    if d = (70.0.39.2/31) || d = (10.0.39.0/31) || d = (10.0.35.0/31) || d = (70.0.39.0/31) || d = (10.0.47.0/31) || d = (10.0.43.0/31) || d = (70.0.39.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.39.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 77n -> 
    if d = (10.0.121.0/31) || d = (10.0.117.0/31) || d = (10.0.125.0/31) || d = (10.0.113.0/31) || d = (70.0.77.2/31) || d = (70.0.77.0/32) || d = (70.0.77.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.77.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 78n -> 
    if d = (10.0.122.0/31) || d = (10.0.118.0/31) || d = (10.0.126.0/31) || d = (10.0.114.0/31) || d = (70.0.78.2/31) || d = (70.0.78.0/32) || d = (70.0.78.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.78.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 7n -> 
    if d = (10.0.249.0/31) || d = (10.0.233.0/31) || d = (10.0.241.0/31) || d = (10.0.225.0/31) || d = (70.0.27.0/32) || d = (10.0.31.0/31) || d = (10.0.30.0/31) || d = (10.0.29.0/31) || d = (10.0.28.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 79n -> 
    if d = (10.0.123.0/31) || d = (10.0.119.0/31) || d = (10.0.127.0/31) || d = (10.0.115.0/31) || d = (70.0.79.2/31) || d = (70.0.79.0/32) || d = (70.0.79.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.79.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 56n -> 
    if d = (70.0.36.2/31) || d = (10.0.40.0/31) || d = (10.0.36.0/31) || d = (70.0.36.0/31) || d = (10.0.44.0/31) || d = (70.0.36.0/32) || d = (10.0.32.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.36.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 4n -> 
    if d = (10.0.129.0/31) || d = (10.0.153.0/31) || d = (10.0.19.0/31) || d = (10.0.18.0/31) || d = (10.0.17.0/31) || d = (70.0.24.0/32) || d = (10.0.137.0/31) || d = (10.0.145.0/31) || d = (10.0.16.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 54n -> 
    if d = (10.0.22.0/31) || d = (10.0.18.0/31) || d = (70.0.30.0/32) || d = (10.0.30.0/31) || d = (10.0.26.0/31) || d = (70.0.30.0/31) || d = (70.0.30.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.30.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 27n -> 
    if d = (10.0.254.0/31) || d = (10.0.238.0/31) || d = (10.0.246.0/31) || d = (10.0.111.0/31) || d = (10.0.110.0/31) || d = (10.0.109.0/31) || d = (10.0.108.0/31) || d = (10.0.230.0/31) || d = (70.0.67.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 55n -> 
    if d = (10.0.23.0/31) || d = (10.0.19.0/31) || d = (70.0.31.0/32) || d = (10.0.31.0/31) || d = (10.0.27.0/31) || d = (70.0.31.0/31) || d = (70.0.31.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.31.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 6n -> 
    if d = (10.0.217.0/31) || d = (10.0.201.0/31) || d = (10.0.209.0/31) || d = (10.0.193.0/31) || d = (10.0.24.0/31) || d = (70.0.26.0/32) || d = (10.0.27.0/31) || d = (10.0.26.0/31) || d = (10.0.25.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 76n -> 
    if d = (10.0.120.0/31) || d = (10.0.116.0/31) || d = (10.0.124.0/31) || d = (10.0.112.0/31) || d = (70.0.76.2/31) || d = (70.0.76.0/32) || d = (70.0.76.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.76.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 5n -> 
    if d = (10.0.185.0/31) || d = (10.0.169.0/31) || d = (10.0.177.0/31) || d = (10.0.23.0/31) || d = (10.0.22.0/31) || d = (10.0.21.0/31) || d = (10.0.20.0/31) || d = (70.0.25.0/32) || d = (10.0.161.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 24n -> 
    if d = (10.0.99.0/31) || d = (10.0.98.0/31) || d = (10.0.97.0/31) || d = (10.0.96.0/31) || d = (70.0.64.0/32) || d = (10.0.150.0/31) || d = (10.0.158.0/31) || d = (10.0.134.0/31) || d = (10.0.142.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 74n -> 
    if d = (10.0.106.0/31) || d = (10.0.102.0/31) || d = (10.0.110.0/31) || d = (70.0.70.2/31) || d = (10.0.98.0/31) || d = (70.0.70.0/31) || d = (70.0.70.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.70.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 75n -> 
    if d = (10.0.107.0/31) || d = (10.0.103.0/31) || d = (10.0.111.0/31) || d = (70.0.71.2/31) || d = (10.0.99.0/31) || d = (70.0.71.0/31) || d = (70.0.71.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.71.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 26n -> 
    if d = (10.0.107.0/31) || d = (10.0.106.0/31) || d = (10.0.105.0/31) || d = (10.0.104.0/31) || d = (10.0.222.0/31) || d = (10.0.206.0/31) || d = (10.0.214.0/31) || d = (70.0.66.0/32) || d = (10.0.198.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 25n -> 
    if d = (10.0.103.0/31) || d = (10.0.102.0/31) || d = (10.0.101.0/31) || d = (10.0.100.0/31) || d = (10.0.182.0/31) || d = (70.0.65.0/32) || d = (10.0.190.0/31) || d = (10.0.166.0/31) || d = (10.0.174.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 33n -> 
    if d = (10.0.140.0/31) || d = (10.0.139.0/31) || d = (10.0.138.0/31) || d = (10.0.137.0/31) || d = (10.0.136.0/31) || d = (10.0.143.0/31) || d = (10.0.142.0/31) || d = (10.0.141.0/31) || d = (70.0.1.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 32n -> 
    if d = (10.0.132.0/31) || d = (10.0.131.0/31) || d = (10.0.130.0/31) || d = (10.0.129.0/31) || d = (10.0.128.0/31) || d = (10.0.135.0/31) || d = (10.0.134.0/31) || d = (10.0.133.0/31) || d = (70.0.0.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 60n -> 
    if d = (10.0.56.0/31) || d = (10.0.52.0/31) || d = (10.0.60.0/31) || d = (70.0.44.2/31) || d = (70.0.44.0/32) || d = (10.0.48.0/31) || d = (70.0.44.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.44.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 41n -> 
    if d = (10.0.156.0/31) || d = (10.0.155.0/31) || d = (10.0.154.0/31) || d = (10.0.153.0/31) || d = (10.0.152.0/31) || d = (10.0.159.0/31) || d = (10.0.158.0/31) || d = (10.0.157.0/31) || d = (70.0.3.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 1n -> 
    if d = (10.0.184.0/31) || d = (10.0.168.0/31) || d = (10.0.176.0/31) || d = (10.0.160.0/31) || d = (70.0.17.0/32) || d = (10.0.7.0/31) || d = (10.0.6.0/31) || d = (10.0.5.0/31) || d = (10.0.4.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 61n -> 
    if d = (10.0.57.0/31) || d = (10.0.53.0/31) || d = (10.0.61.0/31) || d = (70.0.45.2/31) || d = (70.0.45.0/32) || d = (10.0.49.0/31) || d = (70.0.45.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.45.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 40n -> 
    if d = (10.0.151.0/31) || d = (10.0.150.0/31) || d = (10.0.149.0/31) || d = (10.0.148.0/31) || d = (10.0.147.0/31) || d = (10.0.146.0/31) || d = (10.0.145.0/31) || d = (10.0.144.0/31) || d = (70.0.2.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 0n -> 
    if d = (10.0.128.0/31) || d = (10.0.152.0/31) || d = (10.0.136.0/31) || d = (10.0.3.0/31) || d = (10.0.2.0/31) || d = (10.0.1.0/31) || d = (10.0.0.0/31) || d = (70.0.16.0/32) || d = (10.0.144.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 62n -> 
    if d = (10.0.54.0/31) || d = (10.0.50.0/31) || d = (10.0.62.0/31) || d = (10.0.58.0/31) || d = (70.0.46.2/31) || d = (70.0.46.0/32) || d = (70.0.46.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.46.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 43n -> 
    if d = (10.0.173.0/31) || d = (10.0.172.0/31) || d = (10.0.171.0/31) || d = (10.0.170.0/31) || d = (10.0.169.0/31) || d = (10.0.168.0/31) || d = (10.0.175.0/31) || d = (10.0.174.0/31) || d = (70.0.5.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 3n -> 
    if d = (10.0.248.0/31) || d = (10.0.232.0/31) || d = (10.0.240.0/31) || d = (10.0.224.0/31) || d = (70.0.19.0/32) || d = (10.0.15.0/31) || d = (10.0.14.0/31) || d = (10.0.13.0/31) || d = (10.0.12.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 63n -> 
    if d = (10.0.55.0/31) || d = (10.0.51.0/31) || d = (10.0.63.0/31) || d = (10.0.59.0/31) || d = (70.0.47.2/31) || d = (70.0.47.0/32) || d = (70.0.47.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.47.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 42n -> 
    if d = (10.0.167.0/31) || d = (10.0.166.0/31) || d = (10.0.165.0/31) || d = (10.0.164.0/31) || d = (10.0.163.0/31) || d = (10.0.162.0/31) || d = (10.0.161.0/31) || d = (10.0.160.0/31) || d = (70.0.4.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 2n -> 
    if d = (10.0.216.0/31) || d = (10.0.200.0/31) || d = (10.0.208.0/31) || d = (10.0.192.0/31) || d = (70.0.18.0/32) || d = (10.0.8.0/31) || d = (10.0.11.0/31) || d = (10.0.10.0/31) || d = (10.0.9.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 45n -> 
    if d = (10.0.189.0/31) || d = (10.0.188.0/31) || d = (10.0.187.0/31) || d = (10.0.186.0/31) || d = (10.0.185.0/31) || d = (10.0.184.0/31) || d = (10.0.191.0/31) || d = (10.0.190.0/31) || d = (70.0.7.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 44n -> 
    if d = (10.0.183.0/31) || d = (10.0.182.0/31) || d = (10.0.181.0/31) || d = (10.0.180.0/31) || d = (10.0.179.0/31) || d = (10.0.178.0/31) || d = (10.0.177.0/31) || d = (10.0.176.0/31) || d = (70.0.6.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 47n -> 
    if d = (10.0.206.0/31) || d = (10.0.205.0/31) || d = (10.0.204.0/31) || d = (10.0.203.0/31) || d = (10.0.202.0/31) || d = (10.0.201.0/31) || d = (10.0.200.0/31) || d = (10.0.207.0/31) || d = (70.0.9.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 46n -> 
    if d = (10.0.199.0/31) || d = (10.0.198.0/31) || d = (10.0.197.0/31) || d = (10.0.196.0/31) || d = (10.0.195.0/31) || d = (10.0.194.0/31) || d = (10.0.193.0/31) || d = (10.0.192.0/31) || d = (70.0.8.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 19n -> 
    if d = (10.0.252.0/31) || d = (10.0.236.0/31) || d = (10.0.244.0/31) || d = (10.0.228.0/31) || d = (10.0.79.0/31) || d = (10.0.78.0/31) || d = (10.0.77.0/31) || d = (10.0.76.0/31) || d = (70.0.51.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 18n -> 
    if d = (10.0.220.0/31) || d = (10.0.204.0/31) || d = (10.0.74.0/31) || d = (10.0.73.0/31) || d = (10.0.72.0/31) || d = (10.0.212.0/31) || d = (10.0.75.0/31) || d = (10.0.196.0/31) || d = (70.0.50.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 21n -> 
    if d = (10.0.87.0/31) || d = (10.0.86.0/31) || d = (10.0.85.0/31) || d = (10.0.84.0/31) || d = (10.0.189.0/31) || d = (70.0.57.0/32) || d = (10.0.173.0/31) || d = (10.0.181.0/31) || d = (10.0.165.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 20n -> 
    if d = (10.0.83.0/31) || d = (10.0.82.0/31) || d = (10.0.81.0/31) || d = (10.0.80.0/31) || d = (70.0.56.0/32) || d = (10.0.149.0/31) || d = (10.0.157.0/31) || d = (10.0.133.0/31) || d = (10.0.141.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 23n -> 
    if d = (10.0.253.0/31) || d = (10.0.237.0/31) || d = (10.0.245.0/31) || d = (10.0.229.0/31) || d = (10.0.95.0/31) || d = (10.0.94.0/31) || d = (10.0.93.0/31) || d = (10.0.92.0/31) || d = (70.0.59.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 22n -> 
    if d = (10.0.221.0/31) || d = (10.0.90.0/31) || d = (10.0.89.0/31) || d = (10.0.88.0/31) || d = (10.0.91.0/31) || d = (10.0.205.0/31) || d = (10.0.213.0/31) || d = (70.0.58.0/32) || d = (10.0.197.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 67n -> 
    if d = (10.0.71.0/31) || d = (10.0.67.0/31) || d = (10.0.79.0/31) || d = (10.0.75.0/31) || d = (70.0.55.0/31) || d = (70.0.55.0/32) || d = (70.0.55.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.55.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 17n -> 
    if d = (10.0.71.0/31) || d = (10.0.70.0/31) || d = (10.0.69.0/31) || d = (10.0.68.0/31) || d = (10.0.188.0/31) || d = (10.0.172.0/31) || d = (70.0.49.0/32) || d = (10.0.180.0/31) || d = (10.0.164.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 36n -> 
    if d = (10.0.231.0/31) || d = (10.0.230.0/31) || d = (10.0.229.0/31) || d = (10.0.228.0/31) || d = (10.0.227.0/31) || d = (10.0.226.0/31) || d = (10.0.225.0/31) || d = (10.0.224.0/31) || d = (70.0.12.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 35n -> 
    if d = (10.0.222.0/31) || d = (10.0.221.0/31) || d = (10.0.220.0/31) || d = (10.0.219.0/31) || d = (10.0.218.0/31) || d = (10.0.217.0/31) || d = (10.0.216.0/31) || d = (10.0.223.0/31) || d = (70.0.11.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 34n -> 
    if d = (10.0.215.0/31) || d = (10.0.214.0/31) || d = (10.0.213.0/31) || d = (10.0.212.0/31) || d = (10.0.211.0/31) || d = (10.0.210.0/31) || d = (10.0.209.0/31) || d = (10.0.208.0/31) || d = (70.0.10.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 12n -> 
    if d = (10.0.131.0/31) || d = (10.0.51.0/31) || d = (10.0.50.0/31) || d = (10.0.49.0/31) || d = (10.0.48.0/31) || d = (70.0.40.0/32) || d = (10.0.155.0/31) || d = (10.0.139.0/31) || d = (10.0.147.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 39n -> 
    if d = (10.0.255.0/31) || d = (10.0.254.0/31) || d = (10.0.253.0/31) || d = (10.0.252.0/31) || d = (10.0.251.0/31) || d = (10.0.250.0/31) || d = (10.0.249.0/31) || d = (10.0.248.0/31) || d = (70.0.15.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 38n -> 
    if d = (10.0.247.0/31) || d = (10.0.246.0/31) || d = (10.0.245.0/31) || d = (10.0.244.0/31) || d = (10.0.243.0/31) || d = (10.0.242.0/31) || d = (10.0.241.0/31) || d = (10.0.240.0/31) || d = (70.0.14.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 37n -> 
    if d = (10.0.239.0/31) || d = (10.0.238.0/31) || d = (10.0.237.0/31) || d = (10.0.236.0/31) || d = (10.0.235.0/31) || d = (10.0.234.0/31) || d = (10.0.233.0/31) || d = (10.0.232.0/31) || d = (70.0.13.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 64n -> 
    if d = (10.0.72.0/31) || d = (10.0.68.0/31) || d = (10.0.76.0/31) || d = (70.0.52.0/31) || d = (10.0.64.0/31) || d = (70.0.52.0/32) || d = (70.0.52.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.52.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 65n -> 
    if d = (10.0.73.0/31) || d = (10.0.69.0/31) || d = (10.0.77.0/31) || d = (70.0.53.0/31) || d = (10.0.65.0/31) || d = (70.0.53.0/32) || d = (70.0.53.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.53.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 16n -> 
    if d = (10.0.132.0/31) || d = (10.0.67.0/31) || d = (10.0.66.0/31) || d = (10.0.65.0/31) || d = (10.0.64.0/31) || d = (70.0.48.0/32) || d = (10.0.156.0/31) || d = (10.0.140.0/31) || d = (10.0.148.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 66n -> 
    if d = (10.0.74.0/31) || d = (10.0.70.0/31) || d = (10.0.78.0/31) || d = (70.0.54.0/31) || d = (10.0.66.0/31) || d = (70.0.54.0/32) || d = (70.0.54.2/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
    if d = (70.0.54.0/24) then
      let s = Some 1u8 in
      let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}} in
      let fib = best None s None b in
      {connected= None; static = s; ospf = None; bgp = b; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 14n -> 
    if d = (10.0.219.0/31) || d = (10.0.203.0/31) || d = (10.0.211.0/31) || d = (10.0.57.0/31) || d = (10.0.56.0/31) || d = (10.0.195.0/31) || d = (10.0.59.0/31) || d = (10.0.58.0/31) || d = (70.0.42.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 13n -> 
    if d = (10.0.187.0/31) || d = (10.0.55.0/31) || d = (10.0.54.0/31) || d = (10.0.53.0/31) || d = (10.0.52.0/31) || d = (10.0.171.0/31) || d = (10.0.179.0/31) || d = (70.0.41.0/32) || d = (10.0.163.0/31) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 15n -> 
    if d = (10.0.251.0/31) || d = (10.0.235.0/31) || d = (10.0.243.0/31) || d = (10.0.227.0/31) || d = (10.0.63.0/31) || d = (10.0.62.0/31) || d = (10.0.61.0/31) || d = (10.0.60.0/31) || d = (70.0.43.0/32) then
      let c = Some 0u8 in
      let fib = best c None None None in
      {connected= c; static = None; ospf = None; bgp = None; selected=fib;}
    else
  {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | _ -> {connected=None; static=None; ospf=None; bgp=None; selected=None;}

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
     match edge with
     | _ -> None)

let bgpExportPol0 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.28.0) && (prefix < 70.0.29.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpImportPol0 e prefix prefixLen b = b


let bgpExportPol1 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.29.0) && (prefix < 70.0.30.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol2 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.22.0) && (prefix < 70.0.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol3 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.23.0) && (prefix < 70.0.24.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol4 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.68.0) && (prefix < 70.0.69.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol5 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.69.0) && (prefix < 70.0.70.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol6 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol7 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.62.0) && (prefix < 70.0.63.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol8 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.63.0) && (prefix < 70.0.64.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol9 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.20.0) && (prefix < 70.0.21.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol10 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.21.0) && (prefix < 70.0.22.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol11 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.60.0) && (prefix < 70.0.61.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol12 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.61.0) && (prefix < 70.0.62.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol13 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.37.0) && (prefix < 70.0.38.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol14 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.38.0) && (prefix < 70.0.39.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol15 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.39.0) && (prefix < 70.0.40.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol16 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.77.0) && (prefix < 70.0.78.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol17 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.78.0) && (prefix < 70.0.79.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol18 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.79.0) && (prefix < 70.0.80.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol19 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.36.0) && (prefix < 70.0.37.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol20 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.30.0) && (prefix < 70.0.31.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol21 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.31.0) && (prefix < 70.0.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol22 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.76.0) && (prefix < 70.0.77.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol23 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.70.0) && (prefix < 70.0.71.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol24 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.71.0) && (prefix < 70.0.72.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol25 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.44.0) && (prefix < 70.0.45.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol26 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.45.0) && (prefix < 70.0.46.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol27 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.46.0) && (prefix < 70.0.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol28 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.47.0) && (prefix < 70.0.48.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol29 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.55.0) && (prefix < 70.0.56.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol30 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.52.0) && (prefix < 70.0.53.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol31 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.53.0) && (prefix < 70.0.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None

let bgpExportPol32 e prefix prefixLen prot b =
      match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
if ((prefixLen = 24u6) && ((prefix >= 70.0.54.0) && (prefix < 70.0.55.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None


let transferBgp d e x0 =
  let (prefix, prefixLen) = d in
  let prot = x0.selected in
 match e with
   | (52~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol0 e prefix prefixLen prot x0.bgp)
   | (52~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol0 e prefix prefixLen prot x0.bgp)
   | (52~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol0 e prefix prefixLen prot x0.bgp)
   | (52~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol0 e prefix prefixLen prot x0.bgp)
   | (53~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol1 e prefix prefixLen prot x0.bgp)
   | (53~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol1 e prefix prefixLen prot x0.bgp)
   | (53~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol1 e prefix prefixLen prot x0.bgp)
   | (53~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol1 e prefix prefixLen prot x0.bgp)
   | (50~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol2 e prefix prefixLen prot x0.bgp)
   | (50~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol2 e prefix prefixLen prot x0.bgp)
   | (50~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol2 e prefix prefixLen prot x0.bgp)
   | (50~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol2 e prefix prefixLen prot x0.bgp)
   | (51~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol3 e prefix prefixLen prot x0.bgp)
   | (51~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol3 e prefix prefixLen prot x0.bgp)
   | (51~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol3 e prefix prefixLen prot x0.bgp)
   | (51~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol3 e prefix prefixLen prot x0.bgp)
   | (72~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol4 e prefix prefixLen prot x0.bgp)
   | (72~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol4 e prefix prefixLen prot x0.bgp)
   | (72~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol4 e prefix prefixLen prot x0.bgp)
   | (72~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol4 e prefix prefixLen prot x0.bgp)
   | (73~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol5 e prefix prefixLen prot x0.bgp)
   | (73~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol5 e prefix prefixLen prot x0.bgp)
   | (73~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol5 e prefix prefixLen prot x0.bgp)
   | (73~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol5 e prefix prefixLen prot x0.bgp)
   | (29~77) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~78) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~79) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~76) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (29~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~77) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~78) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~79) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (28~76) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (70~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol7 e prefix prefixLen prot x0.bgp)
   | (70~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol7 e prefix prefixLen prot x0.bgp)
   | (70~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol7 e prefix prefixLen prot x0.bgp)
   | (70~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol7 e prefix prefixLen prot x0.bgp)
   | (11~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~57) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~58) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~56) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (11~59) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (71~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol8 e prefix prefixLen prot x0.bgp)
   | (71~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol8 e prefix prefixLen prot x0.bgp)
   | (71~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol8 e prefix prefixLen prot x0.bgp)
   | (71~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol8 e prefix prefixLen prot x0.bgp)
   | (10~56) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~57) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~58) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~59) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (10~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (48~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol9 e prefix prefixLen prot x0.bgp)
   | (48~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol9 e prefix prefixLen prot x0.bgp)
   | (48~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol9 e prefix prefixLen prot x0.bgp)
   | (48~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol9 e prefix prefixLen prot x0.bgp)
   | (49~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol10 e prefix prefixLen prot x0.bgp)
   | (49~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol10 e prefix prefixLen prot x0.bgp)
   | (49~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol10 e prefix prefixLen prot x0.bgp)
   | (49~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol10 e prefix prefixLen prot x0.bgp)
   | (31~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~78) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~76) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~79) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (31~77) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~77) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~78) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~79) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~76) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (30~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (68~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol11 e prefix prefixLen prot x0.bgp)
   | (68~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol11 e prefix prefixLen prot x0.bgp)
   | (68~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol11 e prefix prefixLen prot x0.bgp)
   | (68~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol11 e prefix prefixLen prot x0.bgp)
   | (9~59) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~56) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~57) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (9~58) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (69~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol12 e prefix prefixLen prot x0.bgp)
   | (69~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol12 e prefix prefixLen prot x0.bgp)
   | (69~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol12 e prefix prefixLen prot x0.bgp)
   | (69~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol12 e prefix prefixLen prot x0.bgp)
   | (8~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~59) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~56) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~57) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (8~58) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (57~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol13 e prefix prefixLen prot x0.bgp)
   | (57~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol13 e prefix prefixLen prot x0.bgp)
   | (57~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol13 e prefix prefixLen prot x0.bgp)
   | (57~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol13 e prefix prefixLen prot x0.bgp)
   | (58~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol14 e prefix prefixLen prot x0.bgp)
   | (58~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol14 e prefix prefixLen prot x0.bgp)
   | (58~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol14 e prefix prefixLen prot x0.bgp)
   | (58~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol14 e prefix prefixLen prot x0.bgp)
   | (59~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol15 e prefix prefixLen prot x0.bgp)
   | (59~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol15 e prefix prefixLen prot x0.bgp)
   | (59~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol15 e prefix prefixLen prot x0.bgp)
   | (59~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol15 e prefix prefixLen prot x0.bgp)
   | (77~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol16 e prefix prefixLen prot x0.bgp)
   | (77~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol16 e prefix prefixLen prot x0.bgp)
   | (77~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol16 e prefix prefixLen prot x0.bgp)
   | (77~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol16 e prefix prefixLen prot x0.bgp)
   | (78~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol17 e prefix prefixLen prot x0.bgp)
   | (78~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol17 e prefix prefixLen prot x0.bgp)
   | (78~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol17 e prefix prefixLen prot x0.bgp)
   | (78~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol17 e prefix prefixLen prot x0.bgp)
   | (7~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~52) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~55) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~53) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~54) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (7~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (79~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol18 e prefix prefixLen prot x0.bgp)
   | (79~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol18 e prefix prefixLen prot x0.bgp)
   | (79~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol18 e prefix prefixLen prot x0.bgp)
   | (79~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol18 e prefix prefixLen prot x0.bgp)
   | (56~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol19 e prefix prefixLen prot x0.bgp)
   | (56~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol19 e prefix prefixLen prot x0.bgp)
   | (56~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol19 e prefix prefixLen prot x0.bgp)
   | (56~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol19 e prefix prefixLen prot x0.bgp)
   | (4~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~55) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~54) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~52) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~53) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (4~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (54~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol20 e prefix prefixLen prot x0.bgp)
   | (54~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol20 e prefix prefixLen prot x0.bgp)
   | (54~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol20 e prefix prefixLen prot x0.bgp)
   | (54~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol20 e prefix prefixLen prot x0.bgp)
   | (27~73) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~74) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~72) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~75) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (27~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (55~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol21 e prefix prefixLen prot x0.bgp)
   | (55~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol21 e prefix prefixLen prot x0.bgp)
   | (55~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol21 e prefix prefixLen prot x0.bgp)
   | (55~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol21 e prefix prefixLen prot x0.bgp)
   | (6~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~52) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~55) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~53) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~54) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (6~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (76~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol22 e prefix prefixLen prot x0.bgp)
   | (76~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol22 e prefix prefixLen prot x0.bgp)
   | (76~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol22 e prefix prefixLen prot x0.bgp)
   | (76~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol22 e prefix prefixLen prot x0.bgp)
   | (5~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~55) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~52) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~54) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~53) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (5~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~72) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~73) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~75) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~74) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (24~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (74~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol23 e prefix prefixLen prot x0.bgp)
   | (74~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol23 e prefix prefixLen prot x0.bgp)
   | (74~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol23 e prefix prefixLen prot x0.bgp)
   | (74~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol23 e prefix prefixLen prot x0.bgp)
   | (75~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol24 e prefix prefixLen prot x0.bgp)
   | (75~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol24 e prefix prefixLen prot x0.bgp)
   | (75~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol24 e prefix prefixLen prot x0.bgp)
   | (75~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol24 e prefix prefixLen prot x0.bgp)
   | (26~74) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~73) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~75) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (26~72) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~73) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~75) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~72) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (25~74) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (33~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (32~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (60~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol25 e prefix prefixLen prot x0.bgp)
   | (60~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol25 e prefix prefixLen prot x0.bgp)
   | (60~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol25 e prefix prefixLen prot x0.bgp)
   | (60~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol25 e prefix prefixLen prot x0.bgp)
   | (41~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (41~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~51) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~48) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~50) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~49) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (1~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (61~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol26 e prefix prefixLen prot x0.bgp)
   | (61~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol26 e prefix prefixLen prot x0.bgp)
   | (61~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol26 e prefix prefixLen prot x0.bgp)
   | (61~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol26 e prefix prefixLen prot x0.bgp)
   | (40~28) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~0) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~20) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~8) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~4) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (40~24) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~51) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~50) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~49) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (0~48) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (62~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol27 e prefix prefixLen prot x0.bgp)
   | (62~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol27 e prefix prefixLen prot x0.bgp)
   | (62~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol27 e prefix prefixLen prot x0.bgp)
   | (62~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol27 e prefix prefixLen prot x0.bgp)
   | (43~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (43~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~48) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~51) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~50) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (3~49) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (63~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol28 e prefix prefixLen prot x0.bgp)
   | (63~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol28 e prefix prefixLen prot x0.bgp)
   | (63~12) -> bgpImportPol0 e prefix prefixLen (bgpExportPol28 e prefix prefixLen prot x0.bgp)
   | (63~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol28 e prefix prefixLen prot x0.bgp)
   | (42~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (42~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~48) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~51) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~50) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (2~49) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (45~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~9) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~21) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~1) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~5) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~25) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~13) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (44~29) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (47~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (46~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~66) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~67) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~64) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (19~65) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~65) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~66) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~67) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~64) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (18~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~69) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~71) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~68) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~70) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (21~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~68) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~71) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~70) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (20~69) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~69) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~68) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~71) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (23~70) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~69) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~68) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~71) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (22~70) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (67~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol29 e prefix prefixLen prot x0.bgp)
   | (67~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol29 e prefix prefixLen prot x0.bgp)
   | (67~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol29 e prefix prefixLen prot x0.bgp)
   | (67~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol29 e prefix prefixLen prot x0.bgp)
   | (17~64) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~67) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~66) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (17~65) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (36~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (35~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~6) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~2) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~30) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~14) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~22) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~10) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (34~26) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~60) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~63) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~61) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~62) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (12~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (39~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (38~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~23) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~15) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~3) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~7) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~31) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~11) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (37~27) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (64~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol30 e prefix prefixLen prot x0.bgp)
   | (64~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol30 e prefix prefixLen prot x0.bgp)
   | (64~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol30 e prefix prefixLen prot x0.bgp)
   | (64~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol30 e prefix prefixLen prot x0.bgp)
   | (65~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol31 e prefix prefixLen prot x0.bgp)
   | (65~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol31 e prefix prefixLen prot x0.bgp)
   | (65~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol31 e prefix prefixLen prot x0.bgp)
   | (65~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol31 e prefix prefixLen prot x0.bgp)
   | (16~67) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~64) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~40) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~32) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~66) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~41) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~33) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (16~65) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (66~18) -> bgpImportPol0 e prefix prefixLen (bgpExportPol32 e prefix prefixLen prot x0.bgp)
   | (66~16) -> bgpImportPol0 e prefix prefixLen (bgpExportPol32 e prefix prefixLen prot x0.bgp)
   | (66~17) -> bgpImportPol0 e prefix prefixLen (bgpExportPol32 e prefix prefixLen prot x0.bgp)
   | (66~19) -> bgpImportPol0 e prefix prefixLen (bgpExportPol32 e prefix prefixLen prot x0.bgp)
   | (14~61) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~34) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~62) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~46) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~63) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~35) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~47) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (14~60) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~60) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~43) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~61) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~42) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~45) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~62) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~44) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (13~63) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~37) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~61) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~62) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~63) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~39) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~36) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~60) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)
   | (15~38) -> bgpImportPol0 e prefix prefixLen (bgpExportPol6 e prefix prefixLen prot x0.bgp)


let trans d edge x = 
  let o = transferOspf edge x.ospf in
  let b = transferBgp d edge x in
  {connected=None; static=None; ospf=o; bgp=b; selected=None}

nodes = (80, {
  52n:"edge-28";
  53n:"edge-29";
  50n:"edge-22";
  51n:"edge-23";
  72n:"edge-68";
  73n:"edge-69";
  29n:"aggregation-73";
  28n:"aggregation-72";
  11n:"aggregation-35";
  70n:"edge-62";
  10n:"aggregation-34";
  71n:"edge-63";
  48n:"edge-20";
  49n:"edge-21";
  31n:"aggregation-75";
  30n:"aggregation-74";
  9n:"aggregation-33";
  68n:"edge-60";
  8n:"aggregation-32";
  69n:"edge-61";
  57n:"edge-37";
  58n:"edge-38";
  59n:"edge-39";
  77n:"edge-77";
  7n:"aggregation-27";
  78n:"edge-78";
  79n:"edge-79";
  56n:"edge-36";
  4n:"aggregation-24";
  27n:"aggregation-67";
  54n:"edge-30";
  6n:"aggregation-26";
  55n:"edge-31";
  5n:"aggregation-25";
  76n:"edge-76";
  24n:"aggregation-64";
  74n:"edge-70";
  26n:"aggregation-66";
  75n:"edge-71";
  25n:"aggregation-65";
  33n:"core-1";
  32n:"core-0";
  1n:"aggregation-17";
  41n:"core-3";
  60n:"edge-44";
  0n:"aggregation-16";
  40n:"core-2";
  61n:"edge-45";
  3n:"aggregation-19";
  43n:"core-5";
  62n:"edge-46";
  2n:"aggregation-18";
  42n:"core-4";
  63n:"edge-47";
  45n:"core-7";
  44n:"core-6";
  47n:"core-9";
  46n:"core-8";
  19n:"aggregation-51";
  18n:"aggregation-50";
  21n:"aggregation-57";
  20n:"aggregation-56";
  23n:"aggregation-59";
  22n:"aggregation-58";
  67n:"edge-55";
  17n:"aggregation-49";
  36n:"core-12";
  35n:"core-11";
  34n:"core-10";
  12n:"aggregation-40";
  39n:"core-15";
  38n:"core-14";
  37n:"core-13";
  64n:"edge-52";
  16n:"aggregation-48";
  65n:"edge-53";
  66n:"edge-54";
  14n:"aggregation-42";
  13n:"aggregation-41";
  15n:"aggregation-43";
 })

edges = {
  (0-32,0); (*aggregation-16,Serial4 --> core-0,Serial0*)
  (0-33,1); (*aggregation-16,Serial5 --> core-1,Serial0*)
  (0-40,2); (*aggregation-16,Serial6 --> core-2,Serial0*)
  (0-41,3); (*aggregation-16,Serial7 --> core-3,Serial0*)
  (0-48,4); (*aggregation-16,Serial0 --> edge-20,Serial0*)
  (0-49,5); (*aggregation-16,Serial1 --> edge-21,Serial0*)
  (0-50,6); (*aggregation-16,Serial2 --> edge-22,Serial0*)
  (0-51,7); (*aggregation-16,Serial3 --> edge-23,Serial0*)
  (10-34,8); (*aggregation-34,Serial6 --> core-10,Serial2*)
  (10-35,9); (*aggregation-34,Serial7 --> core-11,Serial2*)
  (10-46,10); (*aggregation-34,Serial4 --> core-8,Serial2*)
  (10-47,11); (*aggregation-34,Serial5 --> core-9,Serial2*)
  (10-56,12); (*aggregation-34,Serial0 --> edge-36,Serial2*)
  (10-57,13); (*aggregation-34,Serial1 --> edge-37,Serial2*)
  (10-58,14); (*aggregation-34,Serial2 --> edge-38,Serial2*)
  (10-59,15); (*aggregation-34,Serial3 --> edge-39,Serial2*)
  (11-36,16); (*aggregation-35,Serial4 --> core-12,Serial2*)
  (11-37,17); (*aggregation-35,Serial5 --> core-13,Serial2*)
  (11-38,18); (*aggregation-35,Serial6 --> core-14,Serial2*)
  (11-39,19); (*aggregation-35,Serial7 --> core-15,Serial2*)
  (11-56,20); (*aggregation-35,Serial0 --> edge-36,Serial3*)
  (11-57,21); (*aggregation-35,Serial1 --> edge-37,Serial3*)
  (11-58,22); (*aggregation-35,Serial2 --> edge-38,Serial3*)
  (11-59,23); (*aggregation-35,Serial3 --> edge-39,Serial3*)
  (12-32,24); (*aggregation-40,Serial4 --> core-0,Serial3*)
  (12-33,25); (*aggregation-40,Serial5 --> core-1,Serial3*)
  (12-40,26); (*aggregation-40,Serial6 --> core-2,Serial3*)
  (12-41,27); (*aggregation-40,Serial7 --> core-3,Serial3*)
  (12-60,28); (*aggregation-40,Serial0 --> edge-44,Serial0*)
  (12-61,29); (*aggregation-40,Serial1 --> edge-45,Serial0*)
  (12-62,30); (*aggregation-40,Serial2 --> edge-46,Serial0*)
  (12-63,31); (*aggregation-40,Serial3 --> edge-47,Serial0*)
  (13-42,32); (*aggregation-41,Serial4 --> core-4,Serial3*)
  (13-43,33); (*aggregation-41,Serial5 --> core-5,Serial3*)
  (13-44,34); (*aggregation-41,Serial6 --> core-6,Serial3*)
  (13-45,35); (*aggregation-41,Serial7 --> core-7,Serial3*)
  (13-60,36); (*aggregation-41,Serial0 --> edge-44,Serial1*)
  (13-61,37); (*aggregation-41,Serial1 --> edge-45,Serial1*)
  (13-62,38); (*aggregation-41,Serial2 --> edge-46,Serial1*)
  (13-63,39); (*aggregation-41,Serial3 --> edge-47,Serial1*)
  (14-34,40); (*aggregation-42,Serial6 --> core-10,Serial3*)
  (14-35,41); (*aggregation-42,Serial7 --> core-11,Serial3*)
  (14-46,42); (*aggregation-42,Serial4 --> core-8,Serial3*)
  (14-47,43); (*aggregation-42,Serial5 --> core-9,Serial3*)
  (14-60,44); (*aggregation-42,Serial0 --> edge-44,Serial2*)
  (14-61,45); (*aggregation-42,Serial1 --> edge-45,Serial2*)
  (14-62,46); (*aggregation-42,Serial2 --> edge-46,Serial2*)
  (14-63,47); (*aggregation-42,Serial3 --> edge-47,Serial2*)
  (15-36,48); (*aggregation-43,Serial4 --> core-12,Serial3*)
  (15-37,49); (*aggregation-43,Serial5 --> core-13,Serial3*)
  (15-38,50); (*aggregation-43,Serial6 --> core-14,Serial3*)
  (15-39,51); (*aggregation-43,Serial7 --> core-15,Serial3*)
  (15-60,52); (*aggregation-43,Serial0 --> edge-44,Serial3*)
  (15-61,53); (*aggregation-43,Serial1 --> edge-45,Serial3*)
  (15-62,54); (*aggregation-43,Serial2 --> edge-46,Serial3*)
  (15-63,55); (*aggregation-43,Serial3 --> edge-47,Serial3*)
  (16-32,56); (*aggregation-48,Serial4 --> core-0,Serial4*)
  (16-33,57); (*aggregation-48,Serial5 --> core-1,Serial4*)
  (16-40,58); (*aggregation-48,Serial6 --> core-2,Serial4*)
  (16-41,59); (*aggregation-48,Serial7 --> core-3,Serial4*)
  (16-64,60); (*aggregation-48,Serial0 --> edge-52,Serial0*)
  (16-65,61); (*aggregation-48,Serial1 --> edge-53,Serial0*)
  (16-66,62); (*aggregation-48,Serial2 --> edge-54,Serial0*)
  (16-67,63); (*aggregation-48,Serial3 --> edge-55,Serial0*)
  (17-42,64); (*aggregation-49,Serial4 --> core-4,Serial4*)
  (17-43,65); (*aggregation-49,Serial5 --> core-5,Serial4*)
  (17-44,66); (*aggregation-49,Serial6 --> core-6,Serial4*)
  (17-45,67); (*aggregation-49,Serial7 --> core-7,Serial4*)
  (17-64,68); (*aggregation-49,Serial0 --> edge-52,Serial1*)
  (17-65,69); (*aggregation-49,Serial1 --> edge-53,Serial1*)
  (17-66,70); (*aggregation-49,Serial2 --> edge-54,Serial1*)
  (17-67,71); (*aggregation-49,Serial3 --> edge-55,Serial1*)
  (18-34,72); (*aggregation-50,Serial6 --> core-10,Serial4*)
  (18-35,73); (*aggregation-50,Serial7 --> core-11,Serial4*)
  (18-46,74); (*aggregation-50,Serial4 --> core-8,Serial4*)
  (18-47,75); (*aggregation-50,Serial5 --> core-9,Serial4*)
  (18-64,76); (*aggregation-50,Serial0 --> edge-52,Serial2*)
  (18-65,77); (*aggregation-50,Serial1 --> edge-53,Serial2*)
  (18-66,78); (*aggregation-50,Serial2 --> edge-54,Serial2*)
  (18-67,79); (*aggregation-50,Serial3 --> edge-55,Serial2*)
  (19-36,80); (*aggregation-51,Serial4 --> core-12,Serial4*)
  (19-37,81); (*aggregation-51,Serial5 --> core-13,Serial4*)
  (19-38,82); (*aggregation-51,Serial6 --> core-14,Serial4*)
  (19-39,83); (*aggregation-51,Serial7 --> core-15,Serial4*)
  (19-64,84); (*aggregation-51,Serial0 --> edge-52,Serial3*)
  (19-65,85); (*aggregation-51,Serial1 --> edge-53,Serial3*)
  (19-66,86); (*aggregation-51,Serial2 --> edge-54,Serial3*)
  (19-67,87); (*aggregation-51,Serial3 --> edge-55,Serial3*)
  (1-42,88); (*aggregation-17,Serial4 --> core-4,Serial0*)
  (1-43,89); (*aggregation-17,Serial5 --> core-5,Serial0*)
  (1-44,90); (*aggregation-17,Serial6 --> core-6,Serial0*)
  (1-45,91); (*aggregation-17,Serial7 --> core-7,Serial0*)
  (1-48,92); (*aggregation-17,Serial0 --> edge-20,Serial1*)
  (1-49,93); (*aggregation-17,Serial1 --> edge-21,Serial1*)
  (1-50,94); (*aggregation-17,Serial2 --> edge-22,Serial1*)
  (1-51,95); (*aggregation-17,Serial3 --> edge-23,Serial1*)
  (20-32,96); (*aggregation-56,Serial4 --> core-0,Serial5*)
  (20-33,97); (*aggregation-56,Serial5 --> core-1,Serial5*)
  (20-40,98); (*aggregation-56,Serial6 --> core-2,Serial5*)
  (20-41,99); (*aggregation-56,Serial7 --> core-3,Serial5*)
  (20-68,100); (*aggregation-56,Serial0 --> edge-60,Serial0*)
  (20-69,101); (*aggregation-56,Serial1 --> edge-61,Serial0*)
  (20-70,102); (*aggregation-56,Serial2 --> edge-62,Serial0*)
  (20-71,103); (*aggregation-56,Serial3 --> edge-63,Serial0*)
  (21-42,104); (*aggregation-57,Serial4 --> core-4,Serial5*)
  (21-43,105); (*aggregation-57,Serial5 --> core-5,Serial5*)
  (21-44,106); (*aggregation-57,Serial6 --> core-6,Serial5*)
  (21-45,107); (*aggregation-57,Serial7 --> core-7,Serial5*)
  (21-68,108); (*aggregation-57,Serial0 --> edge-60,Serial1*)
  (21-69,109); (*aggregation-57,Serial1 --> edge-61,Serial1*)
  (21-70,110); (*aggregation-57,Serial2 --> edge-62,Serial1*)
  (21-71,111); (*aggregation-57,Serial3 --> edge-63,Serial1*)
  (22-34,112); (*aggregation-58,Serial6 --> core-10,Serial5*)
  (22-35,113); (*aggregation-58,Serial7 --> core-11,Serial5*)
  (22-46,114); (*aggregation-58,Serial4 --> core-8,Serial5*)
  (22-47,115); (*aggregation-58,Serial5 --> core-9,Serial5*)
  (22-68,116); (*aggregation-58,Serial0 --> edge-60,Serial2*)
  (22-69,117); (*aggregation-58,Serial1 --> edge-61,Serial2*)
  (22-70,118); (*aggregation-58,Serial2 --> edge-62,Serial2*)
  (22-71,119); (*aggregation-58,Serial3 --> edge-63,Serial2*)
  (23-36,120); (*aggregation-59,Serial4 --> core-12,Serial5*)
  (23-37,121); (*aggregation-59,Serial5 --> core-13,Serial5*)
  (23-38,122); (*aggregation-59,Serial6 --> core-14,Serial5*)
  (23-39,123); (*aggregation-59,Serial7 --> core-15,Serial5*)
  (23-68,124); (*aggregation-59,Serial0 --> edge-60,Serial3*)
  (23-69,125); (*aggregation-59,Serial1 --> edge-61,Serial3*)
  (23-70,126); (*aggregation-59,Serial2 --> edge-62,Serial3*)
  (23-71,127); (*aggregation-59,Serial3 --> edge-63,Serial3*)
  (24-32,128); (*aggregation-64,Serial4 --> core-0,Serial6*)
  (24-33,129); (*aggregation-64,Serial5 --> core-1,Serial6*)
  (24-40,130); (*aggregation-64,Serial6 --> core-2,Serial6*)
  (24-41,131); (*aggregation-64,Serial7 --> core-3,Serial6*)
  (24-72,132); (*aggregation-64,Serial0 --> edge-68,Serial0*)
  (24-73,133); (*aggregation-64,Serial1 --> edge-69,Serial0*)
  (24-74,134); (*aggregation-64,Serial2 --> edge-70,Serial0*)
  (24-75,135); (*aggregation-64,Serial3 --> edge-71,Serial0*)
  (25-42,136); (*aggregation-65,Serial4 --> core-4,Serial6*)
  (25-43,137); (*aggregation-65,Serial5 --> core-5,Serial6*)
  (25-44,138); (*aggregation-65,Serial6 --> core-6,Serial6*)
  (25-45,139); (*aggregation-65,Serial7 --> core-7,Serial6*)
  (25-72,140); (*aggregation-65,Serial0 --> edge-68,Serial1*)
  (25-73,141); (*aggregation-65,Serial1 --> edge-69,Serial1*)
  (25-74,142); (*aggregation-65,Serial2 --> edge-70,Serial1*)
  (25-75,143); (*aggregation-65,Serial3 --> edge-71,Serial1*)
  (26-34,144); (*aggregation-66,Serial6 --> core-10,Serial6*)
  (26-35,145); (*aggregation-66,Serial7 --> core-11,Serial6*)
  (26-46,146); (*aggregation-66,Serial4 --> core-8,Serial6*)
  (26-47,147); (*aggregation-66,Serial5 --> core-9,Serial6*)
  (26-72,148); (*aggregation-66,Serial0 --> edge-68,Serial2*)
  (26-73,149); (*aggregation-66,Serial1 --> edge-69,Serial2*)
  (26-74,150); (*aggregation-66,Serial2 --> edge-70,Serial2*)
  (26-75,151); (*aggregation-66,Serial3 --> edge-71,Serial2*)
  (27-36,152); (*aggregation-67,Serial4 --> core-12,Serial6*)
  (27-37,153); (*aggregation-67,Serial5 --> core-13,Serial6*)
  (27-38,154); (*aggregation-67,Serial6 --> core-14,Serial6*)
  (27-39,155); (*aggregation-67,Serial7 --> core-15,Serial6*)
  (27-72,156); (*aggregation-67,Serial0 --> edge-68,Serial3*)
  (27-73,157); (*aggregation-67,Serial1 --> edge-69,Serial3*)
  (27-74,158); (*aggregation-67,Serial2 --> edge-70,Serial3*)
  (27-75,159); (*aggregation-67,Serial3 --> edge-71,Serial3*)
  (28-32,160); (*aggregation-72,Serial4 --> core-0,Serial7*)
  (28-33,161); (*aggregation-72,Serial5 --> core-1,Serial7*)
  (28-40,162); (*aggregation-72,Serial6 --> core-2,Serial7*)
  (28-41,163); (*aggregation-72,Serial7 --> core-3,Serial7*)
  (28-76,164); (*aggregation-72,Serial0 --> edge-76,Serial0*)
  (28-77,165); (*aggregation-72,Serial1 --> edge-77,Serial0*)
  (28-78,166); (*aggregation-72,Serial2 --> edge-78,Serial0*)
  (28-79,167); (*aggregation-72,Serial3 --> edge-79,Serial0*)
  (29-42,168); (*aggregation-73,Serial4 --> core-4,Serial7*)
  (29-43,169); (*aggregation-73,Serial5 --> core-5,Serial7*)
  (29-44,170); (*aggregation-73,Serial6 --> core-6,Serial7*)
  (29-45,171); (*aggregation-73,Serial7 --> core-7,Serial7*)
  (29-76,172); (*aggregation-73,Serial0 --> edge-76,Serial1*)
  (29-77,173); (*aggregation-73,Serial1 --> edge-77,Serial1*)
  (29-78,174); (*aggregation-73,Serial2 --> edge-78,Serial1*)
  (29-79,175); (*aggregation-73,Serial3 --> edge-79,Serial1*)
  (2-34,176); (*aggregation-18,Serial6 --> core-10,Serial0*)
  (2-35,177); (*aggregation-18,Serial7 --> core-11,Serial0*)
  (2-46,178); (*aggregation-18,Serial4 --> core-8,Serial0*)
  (2-47,179); (*aggregation-18,Serial5 --> core-9,Serial0*)
  (2-48,180); (*aggregation-18,Serial0 --> edge-20,Serial2*)
  (2-49,181); (*aggregation-18,Serial1 --> edge-21,Serial2*)
  (2-50,182); (*aggregation-18,Serial2 --> edge-22,Serial2*)
  (2-51,183); (*aggregation-18,Serial3 --> edge-23,Serial2*)
  (30-34,184); (*aggregation-74,Serial6 --> core-10,Serial7*)
  (30-35,185); (*aggregation-74,Serial7 --> core-11,Serial7*)
  (30-46,186); (*aggregation-74,Serial4 --> core-8,Serial7*)
  (30-47,187); (*aggregation-74,Serial5 --> core-9,Serial7*)
  (30-76,188); (*aggregation-74,Serial0 --> edge-76,Serial2*)
  (30-77,189); (*aggregation-74,Serial1 --> edge-77,Serial2*)
  (30-78,190); (*aggregation-74,Serial2 --> edge-78,Serial2*)
  (30-79,191); (*aggregation-74,Serial3 --> edge-79,Serial2*)
  (31-36,192); (*aggregation-75,Serial4 --> core-12,Serial7*)
  (31-37,193); (*aggregation-75,Serial5 --> core-13,Serial7*)
  (31-38,194); (*aggregation-75,Serial6 --> core-14,Serial7*)
  (31-39,195); (*aggregation-75,Serial7 --> core-15,Serial7*)
  (31-76,196); (*aggregation-75,Serial0 --> edge-76,Serial3*)
  (31-77,197); (*aggregation-75,Serial1 --> edge-77,Serial3*)
  (31-78,198); (*aggregation-75,Serial2 --> edge-78,Serial3*)
  (31-79,199); (*aggregation-75,Serial3 --> edge-79,Serial3*)
  (32-0,200); (*core-0,Serial0 --> aggregation-16,Serial4*)
  (32-12,201); (*core-0,Serial3 --> aggregation-40,Serial4*)
  (32-16,202); (*core-0,Serial4 --> aggregation-48,Serial4*)
  (32-20,203); (*core-0,Serial5 --> aggregation-56,Serial4*)
  (32-24,204); (*core-0,Serial6 --> aggregation-64,Serial4*)
  (32-28,205); (*core-0,Serial7 --> aggregation-72,Serial4*)
  (32-4,206); (*core-0,Serial1 --> aggregation-24,Serial4*)
  (32-8,207); (*core-0,Serial2 --> aggregation-32,Serial4*)
  (33-0,208); (*core-1,Serial0 --> aggregation-16,Serial5*)
  (33-12,209); (*core-1,Serial3 --> aggregation-40,Serial5*)
  (33-16,210); (*core-1,Serial4 --> aggregation-48,Serial5*)
  (33-20,211); (*core-1,Serial5 --> aggregation-56,Serial5*)
  (33-24,212); (*core-1,Serial6 --> aggregation-64,Serial5*)
  (33-28,213); (*core-1,Serial7 --> aggregation-72,Serial5*)
  (33-4,214); (*core-1,Serial1 --> aggregation-24,Serial5*)
  (33-8,215); (*core-1,Serial2 --> aggregation-32,Serial5*)
  (34-10,216); (*core-10,Serial2 --> aggregation-34,Serial6*)
  (34-14,217); (*core-10,Serial3 --> aggregation-42,Serial6*)
  (34-18,218); (*core-10,Serial4 --> aggregation-50,Serial6*)
  (34-2,219); (*core-10,Serial0 --> aggregation-18,Serial6*)
  (34-22,220); (*core-10,Serial5 --> aggregation-58,Serial6*)
  (34-26,221); (*core-10,Serial6 --> aggregation-66,Serial6*)
  (34-30,222); (*core-10,Serial7 --> aggregation-74,Serial6*)
  (34-6,223); (*core-10,Serial1 --> aggregation-26,Serial6*)
  (35-10,224); (*core-11,Serial2 --> aggregation-34,Serial7*)
  (35-14,225); (*core-11,Serial3 --> aggregation-42,Serial7*)
  (35-18,226); (*core-11,Serial4 --> aggregation-50,Serial7*)
  (35-2,227); (*core-11,Serial0 --> aggregation-18,Serial7*)
  (35-22,228); (*core-11,Serial5 --> aggregation-58,Serial7*)
  (35-26,229); (*core-11,Serial6 --> aggregation-66,Serial7*)
  (35-30,230); (*core-11,Serial7 --> aggregation-74,Serial7*)
  (35-6,231); (*core-11,Serial1 --> aggregation-26,Serial7*)
  (36-11,232); (*core-12,Serial2 --> aggregation-35,Serial4*)
  (36-15,233); (*core-12,Serial3 --> aggregation-43,Serial4*)
  (36-19,234); (*core-12,Serial4 --> aggregation-51,Serial4*)
  (36-23,235); (*core-12,Serial5 --> aggregation-59,Serial4*)
  (36-27,236); (*core-12,Serial6 --> aggregation-67,Serial4*)
  (36-3,237); (*core-12,Serial0 --> aggregation-19,Serial4*)
  (36-31,238); (*core-12,Serial7 --> aggregation-75,Serial4*)
  (36-7,239); (*core-12,Serial1 --> aggregation-27,Serial4*)
  (37-11,240); (*core-13,Serial2 --> aggregation-35,Serial5*)
  (37-15,241); (*core-13,Serial3 --> aggregation-43,Serial5*)
  (37-19,242); (*core-13,Serial4 --> aggregation-51,Serial5*)
  (37-23,243); (*core-13,Serial5 --> aggregation-59,Serial5*)
  (37-27,244); (*core-13,Serial6 --> aggregation-67,Serial5*)
  (37-3,245); (*core-13,Serial0 --> aggregation-19,Serial5*)
  (37-31,246); (*core-13,Serial7 --> aggregation-75,Serial5*)
  (37-7,247); (*core-13,Serial1 --> aggregation-27,Serial5*)
  (38-11,248); (*core-14,Serial2 --> aggregation-35,Serial6*)
  (38-15,249); (*core-14,Serial3 --> aggregation-43,Serial6*)
  (38-19,250); (*core-14,Serial4 --> aggregation-51,Serial6*)
  (38-23,251); (*core-14,Serial5 --> aggregation-59,Serial6*)
  (38-27,252); (*core-14,Serial6 --> aggregation-67,Serial6*)
  (38-3,253); (*core-14,Serial0 --> aggregation-19,Serial6*)
  (38-31,254); (*core-14,Serial7 --> aggregation-75,Serial6*)
  (38-7,255); (*core-14,Serial1 --> aggregation-27,Serial6*)
  (39-11,256); (*core-15,Serial2 --> aggregation-35,Serial7*)
  (39-15,257); (*core-15,Serial3 --> aggregation-43,Serial7*)
  (39-19,258); (*core-15,Serial4 --> aggregation-51,Serial7*)
  (39-23,259); (*core-15,Serial5 --> aggregation-59,Serial7*)
  (39-27,260); (*core-15,Serial6 --> aggregation-67,Serial7*)
  (39-3,261); (*core-15,Serial0 --> aggregation-19,Serial7*)
  (39-31,262); (*core-15,Serial7 --> aggregation-75,Serial7*)
  (39-7,263); (*core-15,Serial1 --> aggregation-27,Serial7*)
  (3-36,264); (*aggregation-19,Serial4 --> core-12,Serial0*)
  (3-37,265); (*aggregation-19,Serial5 --> core-13,Serial0*)
  (3-38,266); (*aggregation-19,Serial6 --> core-14,Serial0*)
  (3-39,267); (*aggregation-19,Serial7 --> core-15,Serial0*)
  (3-48,268); (*aggregation-19,Serial0 --> edge-20,Serial3*)
  (3-49,269); (*aggregation-19,Serial1 --> edge-21,Serial3*)
  (3-50,270); (*aggregation-19,Serial2 --> edge-22,Serial3*)
  (3-51,271); (*aggregation-19,Serial3 --> edge-23,Serial3*)
  (40-0,272); (*core-2,Serial0 --> aggregation-16,Serial6*)
  (40-12,273); (*core-2,Serial3 --> aggregation-40,Serial6*)
  (40-16,274); (*core-2,Serial4 --> aggregation-48,Serial6*)
  (40-20,275); (*core-2,Serial5 --> aggregation-56,Serial6*)
  (40-24,276); (*core-2,Serial6 --> aggregation-64,Serial6*)
  (40-28,277); (*core-2,Serial7 --> aggregation-72,Serial6*)
  (40-4,278); (*core-2,Serial1 --> aggregation-24,Serial6*)
  (40-8,279); (*core-2,Serial2 --> aggregation-32,Serial6*)
  (41-0,280); (*core-3,Serial0 --> aggregation-16,Serial7*)
  (41-12,281); (*core-3,Serial3 --> aggregation-40,Serial7*)
  (41-16,282); (*core-3,Serial4 --> aggregation-48,Serial7*)
  (41-20,283); (*core-3,Serial5 --> aggregation-56,Serial7*)
  (41-24,284); (*core-3,Serial6 --> aggregation-64,Serial7*)
  (41-28,285); (*core-3,Serial7 --> aggregation-72,Serial7*)
  (41-4,286); (*core-3,Serial1 --> aggregation-24,Serial7*)
  (41-8,287); (*core-3,Serial2 --> aggregation-32,Serial7*)
  (42-1,288); (*core-4,Serial0 --> aggregation-17,Serial4*)
  (42-13,289); (*core-4,Serial3 --> aggregation-41,Serial4*)
  (42-17,290); (*core-4,Serial4 --> aggregation-49,Serial4*)
  (42-21,291); (*core-4,Serial5 --> aggregation-57,Serial4*)
  (42-25,292); (*core-4,Serial6 --> aggregation-65,Serial4*)
  (42-29,293); (*core-4,Serial7 --> aggregation-73,Serial4*)
  (42-5,294); (*core-4,Serial1 --> aggregation-25,Serial4*)
  (42-9,295); (*core-4,Serial2 --> aggregation-33,Serial4*)
  (43-1,296); (*core-5,Serial0 --> aggregation-17,Serial5*)
  (43-13,297); (*core-5,Serial3 --> aggregation-41,Serial5*)
  (43-17,298); (*core-5,Serial4 --> aggregation-49,Serial5*)
  (43-21,299); (*core-5,Serial5 --> aggregation-57,Serial5*)
  (43-25,300); (*core-5,Serial6 --> aggregation-65,Serial5*)
  (43-29,301); (*core-5,Serial7 --> aggregation-73,Serial5*)
  (43-5,302); (*core-5,Serial1 --> aggregation-25,Serial5*)
  (43-9,303); (*core-5,Serial2 --> aggregation-33,Serial5*)
  (44-1,304); (*core-6,Serial0 --> aggregation-17,Serial6*)
  (44-13,305); (*core-6,Serial3 --> aggregation-41,Serial6*)
  (44-17,306); (*core-6,Serial4 --> aggregation-49,Serial6*)
  (44-21,307); (*core-6,Serial5 --> aggregation-57,Serial6*)
  (44-25,308); (*core-6,Serial6 --> aggregation-65,Serial6*)
  (44-29,309); (*core-6,Serial7 --> aggregation-73,Serial6*)
  (44-5,310); (*core-6,Serial1 --> aggregation-25,Serial6*)
  (44-9,311); (*core-6,Serial2 --> aggregation-33,Serial6*)
  (45-1,312); (*core-7,Serial0 --> aggregation-17,Serial7*)
  (45-13,313); (*core-7,Serial3 --> aggregation-41,Serial7*)
  (45-17,314); (*core-7,Serial4 --> aggregation-49,Serial7*)
  (45-21,315); (*core-7,Serial5 --> aggregation-57,Serial7*)
  (45-25,316); (*core-7,Serial6 --> aggregation-65,Serial7*)
  (45-29,317); (*core-7,Serial7 --> aggregation-73,Serial7*)
  (45-5,318); (*core-7,Serial1 --> aggregation-25,Serial7*)
  (45-9,319); (*core-7,Serial2 --> aggregation-33,Serial7*)
  (46-10,320); (*core-8,Serial2 --> aggregation-34,Serial4*)
  (46-14,321); (*core-8,Serial3 --> aggregation-42,Serial4*)
  (46-18,322); (*core-8,Serial4 --> aggregation-50,Serial4*)
  (46-2,323); (*core-8,Serial0 --> aggregation-18,Serial4*)
  (46-22,324); (*core-8,Serial5 --> aggregation-58,Serial4*)
  (46-26,325); (*core-8,Serial6 --> aggregation-66,Serial4*)
  (46-30,326); (*core-8,Serial7 --> aggregation-74,Serial4*)
  (46-6,327); (*core-8,Serial1 --> aggregation-26,Serial4*)
  (47-10,328); (*core-9,Serial2 --> aggregation-34,Serial5*)
  (47-14,329); (*core-9,Serial3 --> aggregation-42,Serial5*)
  (47-18,330); (*core-9,Serial4 --> aggregation-50,Serial5*)
  (47-2,331); (*core-9,Serial0 --> aggregation-18,Serial5*)
  (47-22,332); (*core-9,Serial5 --> aggregation-58,Serial5*)
  (47-26,333); (*core-9,Serial6 --> aggregation-66,Serial5*)
  (47-30,334); (*core-9,Serial7 --> aggregation-74,Serial5*)
  (47-6,335); (*core-9,Serial1 --> aggregation-26,Serial5*)
  (48-0,336); (*edge-20,Serial0 --> aggregation-16,Serial0*)
  (48-1,337); (*edge-20,Serial1 --> aggregation-17,Serial0*)
  (48-2,338); (*edge-20,Serial2 --> aggregation-18,Serial0*)
  (48-3,339); (*edge-20,Serial3 --> aggregation-19,Serial0*)
  (49-0,340); (*edge-21,Serial0 --> aggregation-16,Serial1*)
  (49-1,341); (*edge-21,Serial1 --> aggregation-17,Serial1*)
  (49-2,342); (*edge-21,Serial2 --> aggregation-18,Serial1*)
  (49-3,343); (*edge-21,Serial3 --> aggregation-19,Serial1*)
  (4-32,344); (*aggregation-24,Serial4 --> core-0,Serial1*)
  (4-33,345); (*aggregation-24,Serial5 --> core-1,Serial1*)
  (4-40,346); (*aggregation-24,Serial6 --> core-2,Serial1*)
  (4-41,347); (*aggregation-24,Serial7 --> core-3,Serial1*)
  (4-52,348); (*aggregation-24,Serial0 --> edge-28,Serial0*)
  (4-53,349); (*aggregation-24,Serial1 --> edge-29,Serial0*)
  (4-54,350); (*aggregation-24,Serial2 --> edge-30,Serial0*)
  (4-55,351); (*aggregation-24,Serial3 --> edge-31,Serial0*)
  (50-0,352); (*edge-22,Serial0 --> aggregation-16,Serial2*)
  (50-1,353); (*edge-22,Serial1 --> aggregation-17,Serial2*)
  (50-2,354); (*edge-22,Serial2 --> aggregation-18,Serial2*)
  (50-3,355); (*edge-22,Serial3 --> aggregation-19,Serial2*)
  (51-0,356); (*edge-23,Serial0 --> aggregation-16,Serial3*)
  (51-1,357); (*edge-23,Serial1 --> aggregation-17,Serial3*)
  (51-2,358); (*edge-23,Serial2 --> aggregation-18,Serial3*)
  (51-3,359); (*edge-23,Serial3 --> aggregation-19,Serial3*)
  (52-4,360); (*edge-28,Serial0 --> aggregation-24,Serial0*)
  (52-5,361); (*edge-28,Serial1 --> aggregation-25,Serial0*)
  (52-6,362); (*edge-28,Serial2 --> aggregation-26,Serial0*)
  (52-7,363); (*edge-28,Serial3 --> aggregation-27,Serial0*)
  (53-4,364); (*edge-29,Serial0 --> aggregation-24,Serial1*)
  (53-5,365); (*edge-29,Serial1 --> aggregation-25,Serial1*)
  (53-6,366); (*edge-29,Serial2 --> aggregation-26,Serial1*)
  (53-7,367); (*edge-29,Serial3 --> aggregation-27,Serial1*)
  (54-4,368); (*edge-30,Serial0 --> aggregation-24,Serial2*)
  (54-5,369); (*edge-30,Serial1 --> aggregation-25,Serial2*)
  (54-6,370); (*edge-30,Serial2 --> aggregation-26,Serial2*)
  (54-7,371); (*edge-30,Serial3 --> aggregation-27,Serial2*)
  (55-4,372); (*edge-31,Serial0 --> aggregation-24,Serial3*)
  (55-5,373); (*edge-31,Serial1 --> aggregation-25,Serial3*)
  (55-6,374); (*edge-31,Serial2 --> aggregation-26,Serial3*)
  (55-7,375); (*edge-31,Serial3 --> aggregation-27,Serial3*)
  (56-10,376); (*edge-36,Serial2 --> aggregation-34,Serial0*)
  (56-11,377); (*edge-36,Serial3 --> aggregation-35,Serial0*)
  (56-8,378); (*edge-36,Serial0 --> aggregation-32,Serial0*)
  (56-9,379); (*edge-36,Serial1 --> aggregation-33,Serial0*)
  (57-10,380); (*edge-37,Serial2 --> aggregation-34,Serial1*)
  (57-11,381); (*edge-37,Serial3 --> aggregation-35,Serial1*)
  (57-8,382); (*edge-37,Serial0 --> aggregation-32,Serial1*)
  (57-9,383); (*edge-37,Serial1 --> aggregation-33,Serial1*)
  (58-10,384); (*edge-38,Serial2 --> aggregation-34,Serial2*)
  (58-11,385); (*edge-38,Serial3 --> aggregation-35,Serial2*)
  (58-8,386); (*edge-38,Serial0 --> aggregation-32,Serial2*)
  (58-9,387); (*edge-38,Serial1 --> aggregation-33,Serial2*)
  (59-10,388); (*edge-39,Serial2 --> aggregation-34,Serial3*)
  (59-11,389); (*edge-39,Serial3 --> aggregation-35,Serial3*)
  (59-8,390); (*edge-39,Serial0 --> aggregation-32,Serial3*)
  (59-9,391); (*edge-39,Serial1 --> aggregation-33,Serial3*)
  (5-42,392); (*aggregation-25,Serial4 --> core-4,Serial1*)
  (5-43,393); (*aggregation-25,Serial5 --> core-5,Serial1*)
  (5-44,394); (*aggregation-25,Serial6 --> core-6,Serial1*)
  (5-45,395); (*aggregation-25,Serial7 --> core-7,Serial1*)
  (5-52,396); (*aggregation-25,Serial0 --> edge-28,Serial1*)
  (5-53,397); (*aggregation-25,Serial1 --> edge-29,Serial1*)
  (5-54,398); (*aggregation-25,Serial2 --> edge-30,Serial1*)
  (5-55,399); (*aggregation-25,Serial3 --> edge-31,Serial1*)
  (60-12,400); (*edge-44,Serial0 --> aggregation-40,Serial0*)
  (60-13,401); (*edge-44,Serial1 --> aggregation-41,Serial0*)
  (60-14,402); (*edge-44,Serial2 --> aggregation-42,Serial0*)
  (60-15,403); (*edge-44,Serial3 --> aggregation-43,Serial0*)
  (61-12,404); (*edge-45,Serial0 --> aggregation-40,Serial1*)
  (61-13,405); (*edge-45,Serial1 --> aggregation-41,Serial1*)
  (61-14,406); (*edge-45,Serial2 --> aggregation-42,Serial1*)
  (61-15,407); (*edge-45,Serial3 --> aggregation-43,Serial1*)
  (62-12,408); (*edge-46,Serial0 --> aggregation-40,Serial2*)
  (62-13,409); (*edge-46,Serial1 --> aggregation-41,Serial2*)
  (62-14,410); (*edge-46,Serial2 --> aggregation-42,Serial2*)
  (62-15,411); (*edge-46,Serial3 --> aggregation-43,Serial2*)
  (63-12,412); (*edge-47,Serial0 --> aggregation-40,Serial3*)
  (63-13,413); (*edge-47,Serial1 --> aggregation-41,Serial3*)
  (63-14,414); (*edge-47,Serial2 --> aggregation-42,Serial3*)
  (63-15,415); (*edge-47,Serial3 --> aggregation-43,Serial3*)
  (64-16,416); (*edge-52,Serial0 --> aggregation-48,Serial0*)
  (64-17,417); (*edge-52,Serial1 --> aggregation-49,Serial0*)
  (64-18,418); (*edge-52,Serial2 --> aggregation-50,Serial0*)
  (64-19,419); (*edge-52,Serial3 --> aggregation-51,Serial0*)
  (65-16,420); (*edge-53,Serial0 --> aggregation-48,Serial1*)
  (65-17,421); (*edge-53,Serial1 --> aggregation-49,Serial1*)
  (65-18,422); (*edge-53,Serial2 --> aggregation-50,Serial1*)
  (65-19,423); (*edge-53,Serial3 --> aggregation-51,Serial1*)
  (66-16,424); (*edge-54,Serial0 --> aggregation-48,Serial2*)
  (66-17,425); (*edge-54,Serial1 --> aggregation-49,Serial2*)
  (66-18,426); (*edge-54,Serial2 --> aggregation-50,Serial2*)
  (66-19,427); (*edge-54,Serial3 --> aggregation-51,Serial2*)
  (67-16,428); (*edge-55,Serial0 --> aggregation-48,Serial3*)
  (67-17,429); (*edge-55,Serial1 --> aggregation-49,Serial3*)
  (67-18,430); (*edge-55,Serial2 --> aggregation-50,Serial3*)
  (67-19,431); (*edge-55,Serial3 --> aggregation-51,Serial3*)
  (68-20,432); (*edge-60,Serial0 --> aggregation-56,Serial0*)
  (68-21,433); (*edge-60,Serial1 --> aggregation-57,Serial0*)
  (68-22,434); (*edge-60,Serial2 --> aggregation-58,Serial0*)
  (68-23,435); (*edge-60,Serial3 --> aggregation-59,Serial0*)
  (69-20,436); (*edge-61,Serial0 --> aggregation-56,Serial1*)
  (69-21,437); (*edge-61,Serial1 --> aggregation-57,Serial1*)
  (69-22,438); (*edge-61,Serial2 --> aggregation-58,Serial1*)
  (69-23,439); (*edge-61,Serial3 --> aggregation-59,Serial1*)
  (6-34,440); (*aggregation-26,Serial6 --> core-10,Serial1*)
  (6-35,441); (*aggregation-26,Serial7 --> core-11,Serial1*)
  (6-46,442); (*aggregation-26,Serial4 --> core-8,Serial1*)
  (6-47,443); (*aggregation-26,Serial5 --> core-9,Serial1*)
  (6-52,444); (*aggregation-26,Serial0 --> edge-28,Serial2*)
  (6-53,445); (*aggregation-26,Serial1 --> edge-29,Serial2*)
  (6-54,446); (*aggregation-26,Serial2 --> edge-30,Serial2*)
  (6-55,447); (*aggregation-26,Serial3 --> edge-31,Serial2*)
  (70-20,448); (*edge-62,Serial0 --> aggregation-56,Serial2*)
  (70-21,449); (*edge-62,Serial1 --> aggregation-57,Serial2*)
  (70-22,450); (*edge-62,Serial2 --> aggregation-58,Serial2*)
  (70-23,451); (*edge-62,Serial3 --> aggregation-59,Serial2*)
  (71-20,452); (*edge-63,Serial0 --> aggregation-56,Serial3*)
  (71-21,453); (*edge-63,Serial1 --> aggregation-57,Serial3*)
  (71-22,454); (*edge-63,Serial2 --> aggregation-58,Serial3*)
  (71-23,455); (*edge-63,Serial3 --> aggregation-59,Serial3*)
  (72-24,456); (*edge-68,Serial0 --> aggregation-64,Serial0*)
  (72-25,457); (*edge-68,Serial1 --> aggregation-65,Serial0*)
  (72-26,458); (*edge-68,Serial2 --> aggregation-66,Serial0*)
  (72-27,459); (*edge-68,Serial3 --> aggregation-67,Serial0*)
  (73-24,460); (*edge-69,Serial0 --> aggregation-64,Serial1*)
  (73-25,461); (*edge-69,Serial1 --> aggregation-65,Serial1*)
  (73-26,462); (*edge-69,Serial2 --> aggregation-66,Serial1*)
  (73-27,463); (*edge-69,Serial3 --> aggregation-67,Serial1*)
  (74-24,464); (*edge-70,Serial0 --> aggregation-64,Serial2*)
  (74-25,465); (*edge-70,Serial1 --> aggregation-65,Serial2*)
  (74-26,466); (*edge-70,Serial2 --> aggregation-66,Serial2*)
  (74-27,467); (*edge-70,Serial3 --> aggregation-67,Serial2*)
  (75-24,468); (*edge-71,Serial0 --> aggregation-64,Serial3*)
  (75-25,469); (*edge-71,Serial1 --> aggregation-65,Serial3*)
  (75-26,470); (*edge-71,Serial2 --> aggregation-66,Serial3*)
  (75-27,471); (*edge-71,Serial3 --> aggregation-67,Serial3*)
  (76-28,472); (*edge-76,Serial0 --> aggregation-72,Serial0*)
  (76-29,473); (*edge-76,Serial1 --> aggregation-73,Serial0*)
  (76-30,474); (*edge-76,Serial2 --> aggregation-74,Serial0*)
  (76-31,475); (*edge-76,Serial3 --> aggregation-75,Serial0*)
  (77-28,476); (*edge-77,Serial0 --> aggregation-72,Serial1*)
  (77-29,477); (*edge-77,Serial1 --> aggregation-73,Serial1*)
  (77-30,478); (*edge-77,Serial2 --> aggregation-74,Serial1*)
  (77-31,479); (*edge-77,Serial3 --> aggregation-75,Serial1*)
  (78-28,480); (*edge-78,Serial0 --> aggregation-72,Serial2*)
  (78-29,481); (*edge-78,Serial1 --> aggregation-73,Serial2*)
  (78-30,482); (*edge-78,Serial2 --> aggregation-74,Serial2*)
  (78-31,483); (*edge-78,Serial3 --> aggregation-75,Serial2*)
  (79-28,484); (*edge-79,Serial0 --> aggregation-72,Serial3*)
  (79-29,485); (*edge-79,Serial1 --> aggregation-73,Serial3*)
  (79-30,486); (*edge-79,Serial2 --> aggregation-74,Serial3*)
  (79-31,487); (*edge-79,Serial3 --> aggregation-75,Serial3*)
  (7-36,488); (*aggregation-27,Serial4 --> core-12,Serial1*)
  (7-37,489); (*aggregation-27,Serial5 --> core-13,Serial1*)
  (7-38,490); (*aggregation-27,Serial6 --> core-14,Serial1*)
  (7-39,491); (*aggregation-27,Serial7 --> core-15,Serial1*)
  (7-52,492); (*aggregation-27,Serial0 --> edge-28,Serial3*)
  (7-53,493); (*aggregation-27,Serial1 --> edge-29,Serial3*)
  (7-54,494); (*aggregation-27,Serial2 --> edge-30,Serial3*)
  (7-55,495); (*aggregation-27,Serial3 --> edge-31,Serial3*)
  (8-32,496); (*aggregation-32,Serial4 --> core-0,Serial2*)
  (8-33,497); (*aggregation-32,Serial5 --> core-1,Serial2*)
  (8-40,498); (*aggregation-32,Serial6 --> core-2,Serial2*)
  (8-41,499); (*aggregation-32,Serial7 --> core-3,Serial2*)
  (8-56,500); (*aggregation-32,Serial0 --> edge-36,Serial0*)
  (8-57,501); (*aggregation-32,Serial1 --> edge-37,Serial0*)
  (8-58,502); (*aggregation-32,Serial2 --> edge-38,Serial0*)
  (8-59,503); (*aggregation-32,Serial3 --> edge-39,Serial0*)
  (9-42,504); (*aggregation-33,Serial4 --> core-4,Serial2*)
  (9-43,505); (*aggregation-33,Serial5 --> core-5,Serial2*)
  (9-44,506); (*aggregation-33,Serial6 --> core-6,Serial2*)
  (9-45,507); (*aggregation-33,Serial7 --> core-7,Serial2*)
  (9-56,508); (*aggregation-33,Serial0 --> edge-36,Serial1*)
  (9-57,509); (*aggregation-33,Serial1 --> edge-37,Serial1*)
  (9-58,510); (*aggregation-33,Serial2 --> edge-38,Serial1*)
  (9-59,511); (*aggregation-33,Serial3 --> edge-39,Serial1*)
}

(*
{edge-28=52, edge-29=53, edge-22=50, edge-23=51, edge-68=72, edge-69=73, aggregation-73=29, aggregation-72=28, aggregation-35=11, edge-62=70, aggregation-34=10, edge-63=71, edge-20=48, edge-21=49, aggregation-75=31, aggregation-74=30, aggregation-33=9, edge-60=68, aggregation-32=8, edge-61=69, edge-37=57, edge-38=58, edge-39=59, edge-77=77, aggregation-27=7, edge-78=78, edge-79=79, edge-36=56, aggregation-24=4, aggregation-67=27, edge-30=54, aggregation-26=6, edge-31=55, aggregation-25=5, edge-76=76, aggregation-64=24, edge-70=74, aggregation-66=26, edge-71=75, aggregation-65=25, core-1=33, core-0=32, aggregation-17=1, core-3=41, edge-44=60, aggregation-16=0, core-2=40, edge-45=61, aggregation-19=3, core-5=43, edge-46=62, aggregation-18=2, core-4=42, edge-47=63, core-7=45, core-6=44, core-9=47, core-8=46, aggregation-51=19, aggregation-50=18, aggregation-57=21, aggregation-56=20, aggregation-59=23, aggregation-58=22, edge-55=67, aggregation-49=17, core-12=36, core-11=35, core-10=34, aggregation-40=12, core-15=39, core-14=38, core-13=37, edge-52=64, aggregation-48=16, edge-53=65, edge-54=66, aggregation-42=14, aggregation-41=13, aggregation-43=15}*)