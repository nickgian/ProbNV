(* models bgp, ospf, static routes, nexthop, AS Path as set, multipath *)

type prefix = (int, int6) (* IP prefix; tuple of (address, length) *)
type ospfType = {ospfAd: int8; weight: int16; areaType:int2; areaId: int; ospfNextHop: set[tedge];}
type bgpType = {bgpAd: int8; lp: int; aslen: int; med:int; comms:set[int]; bgpNextHop: set[tedge]; bgpAS: set[tnode];}
type rib = {
    connected:option[int8]; (* Just track administrative distance *)
    static:option[int8]; (* Just track administrative distance *)
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int2]; (* Which protocol has the best route *) }
type attribute = rib

(* Definitions for the "best" field *)
let p_CONNECTED = 0u2
let p_STATIC = 1u2
let p_OSPF = 2u2
let p_BGP = 3u2

(** Useful helper definitions **)

let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE1 = 2u2
let ospfE2 = 3u2

(* Check if the selected protocol is x *)
let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y

let flipEdge e = 
  match e with  | a~b -> toEdge b a

let getSourceNode e = 
  match e with  | a~b -> a

let min x y = x <u8 y

(* Compute the better of x and y according to f *)
(* Return a boolean (true for x, false for y) for efficiency reasons *)
let pickOption f x y =
  match (x,y) with
  | (None, _) -> false  | (_, None) -> true
  | (Some a, Some b) -> f a b

let pickMinOption = pickOption min

let union (s1 : [C]dict[[C]tedge, [C]bool]) (s2 : [C]dict[[C]tedge, [C]bool]) = combine (fun x y -> x || y) s1 s2

(* OSPF Route ranking: first compare areas, then weights. 
  Multipath is applied by default if enabled during translation.*)
let betterOspf o1 o2 =
  if o1.areaType <u2 o2.areaType then o1
  else if o2.areaType <u2 o1.areaType then o2
  else if o1.weight <u16 o2.weight then o1
  else if o2.weight <u16 o1.weight then o2
  else {o1 with ospfNextHop = union o1.ospfNextHop o2.ospfNextHop}

let mergeOption f x y =
  match (x,y) with
  | (None, _) -> y  | (_, None) -> x
  | (Some a, Some b) -> Some (f a b)

(* BGP Route ranking: first compare local pref, then path length, then MED. 
       If multipath is disabled then tie-break is arbitrary (normally, the router id should be used) *)
let betterBgp multiPath b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2
  else if b1.med < b2.med then b1
  else if b1.med > b2.med then b2
  else if multiPath then {b1 with bgpNextHop = union b1.bgpNextHop b2.bgpNextHop}
  else b1

(* Determine which of the four protocols has the best route by comparing their ADs *)
let best c s o b =
  match (c,s,o,b) with
  (* If no protocol has a route, then we have no route at all *)
  | (None,None,None,None) -> None
  | _ -> 
      (* Otherwise, get administrative distances for osfp and bgp... *)
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      (* ...and figure out which of the protocols has the lowest AD *)
      let (x,p1) = if pickMinOption c s then (c,p_CONNECTED) else (s,p_STATIC) in
      let (y,p2) = if pickMinOption o b then (o,p_OSPF) else (b,p_BGP) in
      Some (if pickMinOption x y then p1 else p2)

(* Compute the best route for each protocol individually, then select the best one *)
let mergeValues bgpMultiPathEnabled x y =
  let c = if (pickMinOption x.connected y.connected) then x.connected else y.connected in
  let s = if (pickMinOption x.static y.static) then x.static else y.static in
  let o = mergeOption betterOspf x.ospf y.ospf in
  let b = mergeOption (betterBgp bgpMultiPathEnabled) x.bgp y.bgp in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y =
  mergeValues false x y

let init d node =
  match node with
  | 42n -> 
if d = (10.0.0.102/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.33.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 48n -> 
if d = (10.0.0.94/31) || d = (10.0.0.62/31) || d = (10.0.0.110/31) || d = (10.0.0.106/31) || d = (10.0.0.120/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.66.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 40n -> 
if d = (10.0.0.46/31) || d = (10.0.0.44/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.42.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 15n -> 
if d = (10.0.0.126/31) || d = (10.0.0.124/31) || d = (10.0.0.22/31) || d = (10.0.0.96/31) || d = (10.0.0.80/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.31.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 8n -> 
if d = (10.0.0.96/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.52.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 10n -> 
if d = (10.0.0.62/31) || d = (10.0.0.30/31) || d = (10.0.0.56/31) || d = (10.0.0.24/31) || d = (10.0.0.4/31) || d = (10.0.0.64/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.58.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 29n -> 
if d = (10.0.0.118/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.27.0/24) || d = (128.0.7.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 38n -> 
if d = (10.0.0.122/31) || d = (10.0.0.72/31) || d = (10.0.0.112/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.24.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 27n -> 
if d = (10.0.0.76/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.26.0/24) || d = (128.0.5.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 20n -> 
if d = (10.0.0.108/31) || d = (10.0.0.120/31) || d = (10.0.0.104/31) || d = (10.0.0.54/31) || d = (10.0.0.48/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.40.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 26n -> 
if d = (10.0.0.58/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.28.0/24) || d = (128.0.4.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 32n -> 
if d = (10.0.0.14/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.45.0/24) || d = (128.0.10.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 36n -> 
if d = (10.0.0.54/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.62.0/24) || d = (128.0.14.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 23n -> 
if d = (10.0.0.74/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.43.0/24) || d = (128.0.1.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 44n -> 
if d = (10.0.0.94/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.39.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 31n -> 
if d = (10.0.0.56/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.54.0/24) || d = (128.0.9.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 21n -> 
if d = (10.0.0.24/31) || d = (10.0.0.22/31) || d = (10.0.0.20/31) || d = (10.0.0.18/31) || d = (10.0.0.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.22.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 30n -> 
if d = (10.0.0.64/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.55.0/24) || d = (128.0.8.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 6n -> 
if d = (10.0.0.12/31) || d = (10.0.0.90/31) || d = (10.0.0.6/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.36.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 33n -> 
if d = (10.0.0.8/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.47.0/24) || d = (128.0.11.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 2n -> 
if d = (10.0.0.74/31) || d = (10.0.0.100/31) || d = (10.0.0.98/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.35.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 16n -> 
if d = (10.0.0.38/31) || d = (10.0.0.36/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.51.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 47n -> 
if d = (10.0.0.60/31) || d = (10.0.0.66/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.59.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 45n -> 
if d = (10.0.0.52/31) || d = (10.0.0.50/31) || d = (10.0.0.48/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.48.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 46n -> 
if d = (10.0.0.122/31) || d = (10.0.0.10/31) || d = (10.0.0.116/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.67.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 17n -> 
if d = (10.0.0.4/31) || d = (10.0.0.2/31) || d = (10.0.0.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.49.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 4n -> 
if d = (10.0.0.72/31) || d = (10.0.0.70/31) || d = (10.0.0.52/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.44.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 43n -> 
if d = (10.0.0.88/31) || d = (10.0.0.86/31) || d = (10.0.0.38/31) || d = (10.0.0.32/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.64.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 13n -> 
if d = (10.0.0.126/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.32.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 39n -> 
if d = (10.0.0.106/31) || d = (10.0.0.104/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.37.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 14n -> 
if d = (10.0.0.60/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.60.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 11n -> 
if d = (10.0.0.14/31) || d = (10.0.0.12/31) || d = (10.0.0.16/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.61.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 0n -> 
if d = (10.0.0.44/31) || d = (10.0.0.124/31) || d = (10.0.0.68/31) || d = (10.0.0.114/31) || d = (10.0.0.82/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.41.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 22n -> 
if d = (10.0.0.68/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.57.0/24) || d = (128.0.0.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 3n -> 
if d = (10.0.0.30/31) || d = (10.0.0.28/31) || d = (10.0.0.26/31) || d = (10.0.0.32/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.25.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 41n -> 
if d = (10.0.0.92/31) || d = (10.0.0.34/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.65.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 9n -> 
if d = (10.0.0.110/31) || d = (10.0.0.88/31) || d = (10.0.0.102/31) || d = (10.0.0.118/31) || d = (10.0.0.116/31) || d = (10.0.0.84/31) || d = (10.0.0.50/31) || d = (10.0.0.114/31) || d = (10.0.0.112/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.53.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 1n -> 
if d = (10.0.0.34/31) || d = (10.0.0.16/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.29.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 5n -> 
if d = (10.0.0.46/31) || d = (10.0.0.78/31) || d = (10.0.0.76/31) || d = (10.0.0.58/31) || d = (10.0.0.20/31) || d = (10.0.0.36/31) || d = (10.0.0.84/31) || d = (10.0.0.82/31) || d = (10.0.0.80/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.46.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 28n -> 
if d = (10.0.0.78/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.30.0/24) || d = (128.0.6.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 19n -> 
if d = (10.0.0.108/31) || d = (10.0.0.42/31) || d = (10.0.0.40/31) || d = (10.0.0.100/31) || d = (10.0.0.2/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.50.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 24n -> 
if d = (10.0.0.28/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.21.0/24) || d = (128.0.2.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 25n -> 
if d = (10.0.0.26/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.20.0/24) || d = (128.0.3.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 7n -> 
if d = (10.0.0.92/31) || d = (10.0.0.90/31) || d = (10.0.0.70/31) || d = (10.0.0.66/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.38.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 18n -> 
if d = (10.0.0.18/31) || d = (10.0.0.98/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.56.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 37n -> 
if d = (10.0.0.86/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.63.0/24) || d = (128.0.15.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 34n -> 
if d = (10.0.0.40/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (128.0.12.0/24) || d = (200.1.23.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 35n -> 
if d = (10.0.0.42/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (128.0.13.0/24) || d = (200.1.19.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 12n -> 
if d = (10.0.0.10/31) || d = (10.0.0.8/31) || d = (10.0.0.6/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (200.1.34.0/24) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | _ -> {connected=None; static=None; ospf=None; bgp=None; selected=None;}

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
     match edge with
     | _ -> None)

 let transferBgp d e x0 =
  let (prefix, prefixLen) = d in
let prot = x0.selected in
 match e with
   | (42~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.33.0) && (prefix < 200.1.34.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (48~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.66.0) && (prefix < 200.1.67.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (48~20) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.66.0) && (prefix < 200.1.67.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (48~39) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.66.0) && (prefix < 200.1.67.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.14.0) && (prefix < 128.0.15.0))) then
(Some {b with lp= 1; comms= b.comms[6553600:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (48~44) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.66.0) && (prefix < 200.1.67.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (48~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.66.0) && (prefix < 200.1.67.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (40~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.42.0) && (prefix < 200.1.43.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (40~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.42.0) && (prefix < 200.1.43.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (15~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.31.0) && (prefix < 200.1.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (15~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.31.0) && (prefix < 200.1.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (15~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.31.0) && (prefix < 200.1.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (15~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.31.0) && (prefix < 200.1.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (15~21) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.31.0) && (prefix < 200.1.32.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.4.0) && (prefix < 128.0.5.0))) then
(Some {b with lp= 1; comms= b.comms[6553613:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (8~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.52.0) && (prefix < 200.1.53.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (10~21) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 1; comms= b.comms[6553601:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (10~48) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 2; comms= b.comms[6553603:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 2; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (10~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 2; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (10~31) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~30) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.58.0) && (prefix < 200.1.59.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (29~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.27.0) && (prefix < 200.1.28.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.7.0) && (prefix < 128.0.8.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553607:= true]; })))
   | (38~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.24.0) && (prefix < 200.1.25.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (38~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.24.0) && (prefix < 200.1.25.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 1; comms= b.comms[6553608:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (38~46) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.24.0) && (prefix < 200.1.25.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.7.0) && (prefix < 128.0.8.0))) then
(Some {b with lp= 1; comms= b.comms[6553608:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (27~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.26.0) && (prefix < 200.1.27.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.5.0) && (prefix < 128.0.6.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553605:= true]; })))
   | (20~48) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.40.0) && (prefix < 200.1.41.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.14.0) && (prefix < 128.0.15.0))) then
(Some {b with lp= 1; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (20~39) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.40.0) && (prefix < 200.1.41.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 2; comms= b.comms[6553613:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.14.0) && (prefix < 128.0.15.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (20~36) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.40.0) && (prefix < 200.1.41.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (20~45) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.40.0) && (prefix < 200.1.41.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (20~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.40.0) && (prefix < 200.1.41.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (26~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.28.0) && (prefix < 200.1.29.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.4.0) && (prefix < 128.0.5.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553604:= true]; })))
   | (32~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.45.0) && (prefix < 200.1.46.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553610:= true]; })))
   | (36~20) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.62.0) && (prefix < 200.1.63.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.14.0) && (prefix < 128.0.15.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553614:= true]; })))
   | (23~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.43.0) && (prefix < 200.1.44.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553601:= true]; })))
   | (44~48) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.39.0) && (prefix < 200.1.40.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (31~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.54.0) && (prefix < 200.1.55.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553609:= true]; })))
   | (21~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.22.0) && (prefix < 200.1.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 1; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (21~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.22.0) && (prefix < 200.1.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (21~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.22.0) && (prefix < 200.1.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.5.0) && (prefix < 128.0.6.0))) then
(Some {b with lp= 1; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (21~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.22.0) && (prefix < 200.1.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553605:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (21~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.22.0) && (prefix < 200.1.23.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (30~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.55.0) && (prefix < 200.1.56.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553608:= true]; })))
   | (6~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.36.0) && (prefix < 200.1.37.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (6~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.36.0) && (prefix < 200.1.37.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 1; comms= b.comms[6553602:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (6~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.36.0) && (prefix < 200.1.37.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (33~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.47.0) && (prefix < 200.1.48.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553611:= true]; })))
   | (2~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.35.0) && (prefix < 200.1.36.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 101; comms= b.comms[6553608:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (2~23) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.35.0) && (prefix < 200.1.36.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (2~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.35.0) && (prefix < 200.1.36.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 2; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (16~43) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.51.0) && (prefix < 200.1.52.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553602:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 2; comms= b.comms[6553605:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (16~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.51.0) && (prefix < 200.1.52.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (47~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.59.0) && (prefix < 200.1.60.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (47~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.59.0) && (prefix < 200.1.60.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (45~20) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.48.0) && (prefix < 200.1.49.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (45~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.48.0) && (prefix < 200.1.49.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (45~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.48.0) && (prefix < 200.1.49.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (46~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.67.0) && (prefix < 200.1.68.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (46~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.67.0) && (prefix < 200.1.68.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (46~38) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.67.0) && (prefix < 200.1.68.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (17~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.49.0) && (prefix < 200.1.50.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (17~21) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.49.0) && (prefix < 200.1.50.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 101; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 1; comms= b.comms[6553602:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (17~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.49.0) && (prefix < 200.1.50.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (4~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.44.0) && (prefix < 200.1.45.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 1; comms= b.comms[6553609:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (4~38) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.44.0) && (prefix < 200.1.45.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (4~45) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.44.0) && (prefix < 200.1.45.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (43~37) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.64.0) && (prefix < 200.1.65.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (43~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.64.0) && (prefix < 200.1.65.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (43~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.64.0) && (prefix < 200.1.65.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 2; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (43~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.64.0) && (prefix < 200.1.65.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (13~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.32.0) && (prefix < 200.1.33.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (39~20) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.37.0) && (prefix < 200.1.38.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (39~48) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.37.0) && (prefix < 200.1.38.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 1; comms= b.comms[6553609:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (14~47) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.60.0) && (prefix < 200.1.61.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (11~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.61.0) && (prefix < 200.1.62.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 1; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (11~32) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.61.0) && (prefix < 200.1.62.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (11~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.61.0) && (prefix < 200.1.62.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 1; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (0~22) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.41.0) && (prefix < 200.1.42.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (0~40) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.41.0) && (prefix < 200.1.42.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.6.0) && (prefix < 128.0.7.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (0~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.41.0) && (prefix < 200.1.42.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.1.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (0~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.41.0) && (prefix < 200.1.42.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.1.0))) then
(Some {b with lp= 101; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (0~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.41.0) && (prefix < 200.1.42.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (22~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.57.0) && (prefix < 200.1.58.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.1.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553600:= true]; })))
   | (3~25) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.25.0) && (prefix < 200.1.26.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~24) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.25.0) && (prefix < 200.1.26.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.25.0) && (prefix < 200.1.26.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (3~43) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.25.0) && (prefix < 200.1.26.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 3; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553604:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (41~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.65.0) && (prefix < 200.1.66.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (41~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.65.0) && (prefix < 200.1.66.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 1; comms= b.comms[6553608:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~48) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~43) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~45) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~29) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (9~42) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~46) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.7.0) && (prefix < 128.0.8.0))) then
(Some {b with lp= 1; comms= b.comms[6553601:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~38) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.7.0) && (prefix < 128.0.8.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (9~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.53.0) && (prefix < 200.1.54.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 101; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.1.0))) then
(Some {b with lp= 100; comms= b.comms[6553601:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (1~41) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.29.0) && (prefix < 200.1.30.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (1~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.29.0) && (prefix < 200.1.30.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.8.0) && (prefix < 128.0.9.0))) then
(Some {b with lp= 1; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~28) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~40) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.6.0) && (prefix < 128.0.7.0))) then
(Some {b with lp= 1; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~26) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~21) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 1; comms= b.comms[6553614:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.5.0) && (prefix < 128.0.6.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.4.0) && (prefix < 128.0.5.0))) then
(Some {b with lp= 1; comms= b.comms[6553604:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~27) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.5.0) && (prefix < 128.0.6.0))) then
(Some {b with lp= 1; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.4.0) && (prefix < 128.0.5.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (5~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.46.0) && (prefix < 200.1.47.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.6.0) && (prefix < 128.0.7.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (28~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.30.0) && (prefix < 200.1.31.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.6.0) && (prefix < 128.0.7.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553606:= true]; })))
   | (19~20) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.50.0) && (prefix < 200.1.51.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.9.0) && (prefix < 128.0.10.0))) then
(Some {b with lp= 101; comms= b.comms[6553610:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 1; comms= b.comms[6553606:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (19~35) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.50.0) && (prefix < 200.1.51.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (19~34) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.50.0) && (prefix < 200.1.51.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (19~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.50.0) && (prefix < 200.1.51.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 1; comms= b.comms[6553602:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.1.0) && (prefix < 128.0.2.0))) then
(Some {b with lp= 1; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 100; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (19~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.50.0) && (prefix < 200.1.51.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 2; comms= b.comms[6553605:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (24~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.21.0) && (prefix < 200.1.22.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.2.0) && (prefix < 128.0.3.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553602:= true]; })))
   | (25~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.20.0) && (prefix < 200.1.21.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.3.0) && (prefix < 128.0.4.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553603:= true]; })))
   | (7~47) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.38.0) && (prefix < 200.1.39.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (7~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.38.0) && (prefix < 200.1.39.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (7~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.38.0) && (prefix < 200.1.39.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 1; comms= b.comms[6553615:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (7~41) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.38.0) && (prefix < 200.1.39.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.10.0) && (prefix < 128.0.11.0))) then
(Some {b with lp= 1; comms= b.comms[6553611:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (18~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.56.0) && (prefix < 200.1.57.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 1; comms= b.comms[6553607:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (18~21) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.56.0) && (prefix < 200.1.57.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (37~43) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.63.0) && (prefix < 200.1.64.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.15.0) && (prefix < 128.0.16.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553615:= true]; })))
   | (34~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.23.0) && (prefix < 200.1.24.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.12.0) && (prefix < 128.0.13.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553612:= true]; })))
   | (35~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.19.0) && (prefix < 200.1.20.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if ((prefixLen = 24u6) && ((prefix >= 128.0.13.0) && (prefix < 128.0.14.0))) then
(Some {b with lp= 100; aslen= b.aslen + 2 + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           (Some {b with lp= 1; comms= b.comms[6553613:= true]; })))
   | (12~46) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.34.0) && (prefix < 200.1.35.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 1; comms= b.comms[6553612:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))
   | (12~33) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.34.0) && (prefix < 200.1.35.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (12~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 200.1.34.0) && (prefix < 200.1.35.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
           if ((prefixLen = 24u6) && ((prefix >= 128.0.11.0) && (prefix < 128.0.12.0))) then
(Some {b with lp= 2; comms= b.comms[6553602:= true]; })
 else
if ((prefixLen = 20u6) && ((prefix >= 128.0.0.0) && (prefix < 128.0.16.0))) then
None
 else
(Some b)))


let trans d edge x = 
  let o = transferOspf edge x.ospf in
  let b = transferBgp d edge x in
  {connected=None; static=None; ospf=o; bgp=b; selected=None}

nodes = (49, {
  15n:"london";
  10n:"geneva";
  29n:"peerfrankfurt_7";
  38n:"praha";
  27n:"peerbrussels_5";
  26n:"peerbrussels_4";
  36n:"peermilan_14";
  6n:"bucharest";
  2n:"barcelona";
  45n:"vienna";
  46n:"warsaw";
  17n:"lyon";
  4n:"bratislava";
  13n:"lisbon";
  14n:"ljubjana";
  39n:"roma";
  11n:"istanbul";
  0n:"amsterdam";
  3n:"basel";
  41n:"sofia";
  1n:"athens";
  5n:"brussels";
  28n:"peerbrussels_6";
  7n:"budapest";
  18n:"madrid";
  34n:"peermarseille_12";
  37n:"peerstrasbourg_15";
  12n:"kiev";
  35n:"peermarseille_13";
  42n:"stockholm";
  48n:"zurich";
  8n:"dublin";
  40n:"rotterdam";
  20n:"milan";
  32n:"peeristanbul_10";
  23n:"peerbarcelona_1";
  44n:"vaduz";
  21n:"paris";
  31n:"peergeneva_9";
  30n:"peergeneva_8";
  33n:"peerkiev_11";
  16n:"luxembourg";
  47n:"zagreb";
  43n:"strasbourg";
  22n:"peeramsterdam_0";
  9n:"frankfurt";
  19n:"marseille";
  24n:"peerbasel_2";
  25n:"peerbasel_3";
 })

edges = {
  (0-15,0); (*amsterdam,FastEthernet1/0 --> london,FastEthernet0/0*)
  (0-22,1); (*amsterdam,FastEthernet1/1 --> peeramsterdam_0,FastEthernet0/0*)
  (0-40,2); (*amsterdam,FastEthernet2/0 --> rotterdam,FastEthernet0/0*)
  (0-5,3); (*amsterdam,FastEthernet0/0 --> brussels,FastEthernet0/0*)
  (0-9,4); (*amsterdam,FastEthernet0/1 --> frankfurt,FastEthernet0/0*)
  (10-17,5); (*geneva,FastEthernet0/1 --> lyon,FastEthernet0/0*)
  (10-21,6); (*geneva,FastEthernet1/0 --> paris,FastEthernet0/1*)
  (10-3,7); (*geneva,FastEthernet0/0 --> basel,FastEthernet0/0*)
  (10-30,8); (*geneva,FastEthernet1/1 --> peergeneva_8,FastEthernet0/0*)
  (10-31,9); (*geneva,FastEthernet2/0 --> peergeneva_9,FastEthernet0/0*)
  (10-48,10); (*geneva,FastEthernet2/1 --> zurich,FastEthernet0/1*)
  (11-1,11); (*istanbul,FastEthernet0/0 --> athens,FastEthernet0/0*)
  (11-32,12); (*istanbul,FastEthernet1/0 --> peeristanbul_10,FastEthernet0/0*)
  (11-6,13); (*istanbul,FastEthernet0/1 --> bucharest,FastEthernet0/1*)
  (12-33,14); (*kiev,FastEthernet0/1 --> peerkiev_11,FastEthernet0/0*)
  (12-46,15); (*kiev,FastEthernet1/0 --> warsaw,FastEthernet0/1*)
  (12-6,16); (*kiev,FastEthernet0/0 --> bucharest,FastEthernet1/0*)
  (13-15,17); (*lisbon,FastEthernet0/0 --> london,FastEthernet1/1*)
  (14-47,18); (*ljubjana,FastEthernet0/0 --> zagreb,FastEthernet0/1*)
  (15-0,19); (*london,FastEthernet0/0 --> amsterdam,FastEthernet1/0*)
  (15-13,20); (*london,FastEthernet1/1 --> lisbon,FastEthernet0/0*)
  (15-21,21); (*london,FastEthernet2/0 --> paris,FastEthernet1/0*)
  (15-5,22); (*london,FastEthernet0/1 --> brussels,FastEthernet1/0*)
  (15-8,23); (*london,FastEthernet1/0 --> dublin,FastEthernet0/0*)
  (16-43,24); (*luxembourg,FastEthernet0/1 --> strasbourg,FastEthernet1/0*)
  (16-5,25); (*luxembourg,FastEthernet0/0 --> brussels,FastEthernet1/1*)
  (17-10,26); (*lyon,FastEthernet0/0 --> geneva,FastEthernet0/1*)
  (17-19,27); (*lyon,FastEthernet0/1 --> marseille,FastEthernet0/1*)
  (17-21,28); (*lyon,FastEthernet1/0 --> paris,FastEthernet1/1*)
  (18-2,29); (*madrid,FastEthernet0/0 --> barcelona,FastEthernet0/0*)
  (18-21,30); (*madrid,FastEthernet0/1 --> paris,FastEthernet2/0*)
  (19-17,31); (*marseille,FastEthernet0/1 --> lyon,FastEthernet0/1*)
  (19-2,32); (*marseille,FastEthernet0/0 --> barcelona,FastEthernet0/1*)
  (19-20,33); (*marseille,FastEthernet1/0 --> milan,FastEthernet0/0*)
  (19-34,34); (*marseille,FastEthernet1/1 --> peermarseille_12,FastEthernet0/0*)
  (19-35,35); (*marseille,FastEthernet2/0 --> peermarseille_13,FastEthernet0/0*)
  (1-11,36); (*athens,FastEthernet0/0 --> istanbul,FastEthernet0/0*)
  (1-41,37); (*athens,FastEthernet0/1 --> sofia,FastEthernet0/0*)
  (20-19,38); (*milan,FastEthernet0/0 --> marseille,FastEthernet1/0*)
  (20-36,39); (*milan,FastEthernet0/1 --> peermilan_14,FastEthernet0/0*)
  (20-39,40); (*milan,FastEthernet1/0 --> roma,FastEthernet0/0*)
  (20-45,41); (*milan,FastEthernet1/1 --> vienna,FastEthernet1/0*)
  (20-48,42); (*milan,FastEthernet2/0 --> zurich,FastEthernet1/0*)
  (21-10,43); (*paris,FastEthernet0/1 --> geneva,FastEthernet1/0*)
  (21-15,44); (*paris,FastEthernet1/0 --> london,FastEthernet2/0*)
  (21-17,45); (*paris,FastEthernet1/1 --> lyon,FastEthernet1/0*)
  (21-18,46); (*paris,FastEthernet2/0 --> madrid,FastEthernet0/1*)
  (21-5,47); (*paris,FastEthernet0/0 --> brussels,FastEthernet2/0*)
  (22-0,48); (*peeramsterdam_0,FastEthernet0/0 --> amsterdam,FastEthernet1/1*)
  (23-2,49); (*peerbarcelona_1,FastEthernet0/0 --> barcelona,FastEthernet1/0*)
  (24-3,50); (*peerbasel_2,FastEthernet0/0 --> basel,FastEthernet0/1*)
  (25-3,51); (*peerbasel_3,FastEthernet0/0 --> basel,FastEthernet1/0*)
  (26-5,52); (*peerbrussels_4,FastEthernet0/0 --> brussels,FastEthernet2/1*)
  (27-5,53); (*peerbrussels_5,FastEthernet0/0 --> brussels,FastEthernet3/0*)
  (28-5,54); (*peerbrussels_6,FastEthernet0/0 --> brussels,FastEthernet3/1*)
  (29-9,55); (*peerfrankfurt_7,FastEthernet0/0 --> frankfurt,FastEthernet1/0*)
  (2-18,56); (*barcelona,FastEthernet0/0 --> madrid,FastEthernet0/0*)
  (2-19,57); (*barcelona,FastEthernet0/1 --> marseille,FastEthernet0/0*)
  (2-23,58); (*barcelona,FastEthernet1/0 --> peerbarcelona_1,FastEthernet0/0*)
  (30-10,59); (*peergeneva_8,FastEthernet0/0 --> geneva,FastEthernet1/1*)
  (31-10,60); (*peergeneva_9,FastEthernet0/0 --> geneva,FastEthernet2/0*)
  (32-11,61); (*peeristanbul_10,FastEthernet0/0 --> istanbul,FastEthernet1/0*)
  (33-12,62); (*peerkiev_11,FastEthernet0/0 --> kiev,FastEthernet0/1*)
  (34-19,63); (*peermarseille_12,FastEthernet0/0 --> marseille,FastEthernet1/1*)
  (35-19,64); (*peermarseille_13,FastEthernet0/0 --> marseille,FastEthernet2/0*)
  (36-20,65); (*peermilan_14,FastEthernet0/0 --> milan,FastEthernet0/1*)
  (37-43,66); (*peerstrasbourg_15,FastEthernet0/0 --> strasbourg,FastEthernet1/1*)
  (38-4,67); (*praha,FastEthernet0/0 --> bratislava,FastEthernet0/1*)
  (38-46,68); (*praha,FastEthernet1/0 --> warsaw,FastEthernet1/0*)
  (38-9,69); (*praha,FastEthernet0/1 --> frankfurt,FastEthernet1/1*)
  (39-20,70); (*roma,FastEthernet0/0 --> milan,FastEthernet1/0*)
  (39-48,71); (*roma,FastEthernet0/1 --> zurich,FastEthernet1/1*)
  (3-10,72); (*basel,FastEthernet0/0 --> geneva,FastEthernet0/0*)
  (3-24,73); (*basel,FastEthernet0/1 --> peerbasel_2,FastEthernet0/0*)
  (3-25,74); (*basel,FastEthernet1/0 --> peerbasel_3,FastEthernet0/0*)
  (3-43,75); (*basel,FastEthernet1/1 --> strasbourg,FastEthernet0/0*)
  (40-0,76); (*rotterdam,FastEthernet0/0 --> amsterdam,FastEthernet2/0*)
  (40-5,77); (*rotterdam,FastEthernet0/1 --> brussels,FastEthernet4/0*)
  (41-1,78); (*sofia,FastEthernet0/0 --> athens,FastEthernet0/1*)
  (41-7,79); (*sofia,FastEthernet0/1 --> budapest,FastEthernet1/0*)
  (42-9,80); (*stockholm,FastEthernet0/0 --> frankfurt,FastEthernet2/0*)
  (43-16,81); (*strasbourg,FastEthernet1/0 --> luxembourg,FastEthernet0/1*)
  (43-3,82); (*strasbourg,FastEthernet0/0 --> basel,FastEthernet1/1*)
  (43-37,83); (*strasbourg,FastEthernet1/1 --> peerstrasbourg_15,FastEthernet0/0*)
  (43-9,84); (*strasbourg,FastEthernet0/1 --> frankfurt,FastEthernet2/1*)
  (44-48,85); (*vaduz,FastEthernet0/0 --> zurich,FastEthernet2/0*)
  (45-20,86); (*vienna,FastEthernet1/0 --> milan,FastEthernet1/1*)
  (45-4,87); (*vienna,FastEthernet0/0 --> bratislava,FastEthernet1/0*)
  (45-9,88); (*vienna,FastEthernet0/1 --> frankfurt,FastEthernet3/0*)
  (46-12,89); (*warsaw,FastEthernet0/1 --> kiev,FastEthernet1/0*)
  (46-38,90); (*warsaw,FastEthernet1/0 --> praha,FastEthernet1/0*)
  (46-9,91); (*warsaw,FastEthernet0/0 --> frankfurt,FastEthernet3/1*)
  (47-14,92); (*zagreb,FastEthernet0/1 --> ljubjana,FastEthernet0/0*)
  (47-7,93); (*zagreb,FastEthernet0/0 --> budapest,FastEthernet1/1*)
  (48-10,94); (*zurich,FastEthernet0/1 --> geneva,FastEthernet2/1*)
  (48-20,95); (*zurich,FastEthernet1/0 --> milan,FastEthernet2/0*)
  (48-39,96); (*zurich,FastEthernet1/1 --> roma,FastEthernet0/1*)
  (48-44,97); (*zurich,FastEthernet2/0 --> vaduz,FastEthernet0/0*)
  (48-9,98); (*zurich,FastEthernet0/0 --> frankfurt,FastEthernet4/0*)
  (4-38,99); (*bratislava,FastEthernet0/1 --> praha,FastEthernet0/0*)
  (4-45,100); (*bratislava,FastEthernet1/0 --> vienna,FastEthernet0/0*)
  (4-7,101); (*bratislava,FastEthernet0/0 --> budapest,FastEthernet0/0*)
  (5-0,102); (*brussels,FastEthernet0/0 --> amsterdam,FastEthernet0/0*)
  (5-15,103); (*brussels,FastEthernet1/0 --> london,FastEthernet0/1*)
  (5-16,104); (*brussels,FastEthernet1/1 --> luxembourg,FastEthernet0/0*)
  (5-21,105); (*brussels,FastEthernet2/0 --> paris,FastEthernet0/0*)
  (5-26,106); (*brussels,FastEthernet2/1 --> peerbrussels_4,FastEthernet0/0*)
  (5-27,107); (*brussels,FastEthernet3/0 --> peerbrussels_5,FastEthernet0/0*)
  (5-28,108); (*brussels,FastEthernet3/1 --> peerbrussels_6,FastEthernet0/0*)
  (5-40,109); (*brussels,FastEthernet4/0 --> rotterdam,FastEthernet0/1*)
  (5-9,110); (*brussels,FastEthernet0/1 --> frankfurt,FastEthernet0/1*)
  (6-11,111); (*bucharest,FastEthernet0/1 --> istanbul,FastEthernet0/1*)
  (6-12,112); (*bucharest,FastEthernet1/0 --> kiev,FastEthernet0/0*)
  (6-7,113); (*bucharest,FastEthernet0/0 --> budapest,FastEthernet0/1*)
  (7-4,114); (*budapest,FastEthernet0/0 --> bratislava,FastEthernet0/0*)
  (7-41,115); (*budapest,FastEthernet1/0 --> sofia,FastEthernet0/1*)
  (7-47,116); (*budapest,FastEthernet1/1 --> zagreb,FastEthernet0/0*)
  (7-6,117); (*budapest,FastEthernet0/1 --> bucharest,FastEthernet0/0*)
  (8-15,118); (*dublin,FastEthernet0/0 --> london,FastEthernet1/0*)
  (9-0,119); (*frankfurt,FastEthernet0/0 --> amsterdam,FastEthernet0/1*)
  (9-29,120); (*frankfurt,FastEthernet1/0 --> peerfrankfurt_7,FastEthernet0/0*)
  (9-38,121); (*frankfurt,FastEthernet1/1 --> praha,FastEthernet0/1*)
  (9-42,122); (*frankfurt,FastEthernet2/0 --> stockholm,FastEthernet0/0*)
  (9-43,123); (*frankfurt,FastEthernet2/1 --> strasbourg,FastEthernet0/1*)
  (9-45,124); (*frankfurt,FastEthernet3/0 --> vienna,FastEthernet0/1*)
  (9-46,125); (*frankfurt,FastEthernet3/1 --> warsaw,FastEthernet0/0*)
  (9-48,126); (*frankfurt,FastEthernet4/0 --> zurich,FastEthernet0/0*)
  (9-5,127); (*frankfurt,FastEthernet0/1 --> brussels,FastEthernet0/1*)
}

(*
{london=15, geneva=10, peerfrankfurt_7=29, praha=38, peerbrussels_5=27, peerbrussels_4=26, peermilan_14=36, bucharest=6, barcelona=2, vienna=45, warsaw=46, lyon=17, bratislava=4, lisbon=13, ljubjana=14, roma=39, istanbul=11, amsterdam=0, basel=3, sofia=41, athens=1, brussels=5, peerbrussels_6=28, budapest=7, madrid=18, peermarseille_12=34, peerstrasbourg_15=37, kiev=12, peermarseille_13=35, stockholm=42, zurich=48, dublin=8, rotterdam=40, milan=20, peeristanbul_10=32, peerbarcelona_1=23, vaduz=44, paris=21, peergeneva_9=31, peergeneva_8=30, peerkiev_11=33, luxembourg=16, zagreb=47, strasbourg=43, peeramsterdam_0=22, frankfurt=9, marseille=19, peerbasel_2=24, peerbasel_3=25}*)