include "LinkFaults2/SP4MultiAS_2_linkFaults.nv"

type flow = {srcIp: int; dstIp: int; srcPort:int16; dstPort:int16; protocol: int8; flowSize:float }

let aclOut edge fs = 
  match edge with
  | _ -> true

let split fs npaths = {fs with flowSize = fs.flowSize /. npaths}

let fwdOut (r : [C]rib) e (fs : [C]option[flow])  = 
  match fs with
  | None -> None
  | Some fs -> 
     (match r.selected with
       | None -> None
       | Some 0u2 -> Some None
       | Some 1u2 -> Some None
       | Some 2u2 -> (match r.ospf with
                 | None -> None (*can't happen *) 
                 | Some o -> (
                   if o.ospfNextHop = {} then Some None else
                 if o.ospfNextHop[e] && (aclOut e fs) then Some (Some (split fs (size o.ospfNextHop true))) else None))
        | Some 3u2 -> (match r.bgp with
                 | None -> None (*can't happen *)
                 | Some b -> (
                   if b.bgpNextHop = {} then Some None else
                 if b.bgpNextHop[e] && (aclOut e fs) then Some (Some (split fs (size b.bgpNextHop true))) else None))
      )

let aclIn edge fs = 
  match edge with
  | _ -> true

let fwdIn e fs = if aclIn e fs then fs else None

let hinitV u = 0.0

let logV u fs nodeHistory = 0.0

let hinitE e = 0.0

let logE e fs edgeHistory =
  match fs with
  | None -> edgeHistory
  | Some f -> f.flowSize +. edgeHistory

let initTC0 u =
  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.10.1; srcPort = 14996u16; dstPort = 24558u16; protocol = 17u8; flowSize = 473.0})
  else  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.10.1; srcPort = 27574u16; dstPort = 1820u16; protocol = 17u8; flowSize = 455.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.10.1; srcPort = 10484u16; dstPort = 25427u16; protocol = 17u8; flowSize = 500.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.10.1; srcPort = 62047u16; dstPort = 24270u16; protocol = 17u8; flowSize = 343.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.10.1; srcPort = 48160u16; dstPort = 44346u16; protocol = 6u8; flowSize = 307.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.10.1; srcPort = 46752u16; dstPort = 1270u16; protocol = 17u8; flowSize = 233.0})
  else  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.10.1; srcPort = 57292u16; dstPort = 59565u16; protocol = 6u8; flowSize = 500.0})
  else None

let fwdOutTc0 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_10_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC1 u =
  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.11.1; srcPort = 20670u16; dstPort = 4938u16; protocol = 17u8; flowSize = 574.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.11.1; srcPort = 138u16; dstPort = 60843u16; protocol = 6u8; flowSize = 513.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.11.1; srcPort = 15469u16; dstPort = 4111u16; protocol = 17u8; flowSize = 836.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.11.1; srcPort = 23695u16; dstPort = 5115u16; protocol = 6u8; flowSize = 455.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.11.1; srcPort = 38750u16; dstPort = 24721u16; protocol = 17u8; flowSize = 390.0})
  else  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.11.1; srcPort = 39072u16; dstPort = 20386u16; protocol = 17u8; flowSize = 836.0})
  else  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.11.1; srcPort = 14585u16; dstPort = 32921u16; protocol = 6u8; flowSize = 790.0})
  else None

let fwdOutTc1 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_11_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC2 u =
  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.14.1; srcPort = 44820u16; dstPort = 21043u16; protocol = 6u8; flowSize = 406.0})
  else  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.14.1; srcPort = 26452u16; dstPort = 55166u16; protocol = 6u8; flowSize = 390.0})
  else  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.14.1; srcPort = 22989u16; dstPort = 15431u16; protocol = 6u8; flowSize = 429.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.14.1; srcPort = 51721u16; dstPort = 50167u16; protocol = 17u8; flowSize = 295.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.14.1; srcPort = 21055u16; dstPort = 35261u16; protocol = 6u8; flowSize = 233.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.14.1; srcPort = 37823u16; dstPort = 48680u16; protocol = 6u8; flowSize = 264.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.14.1; srcPort = 49831u16; dstPort = 59284u16; protocol = 6u8; flowSize = 430.0})
  else None

let fwdOutTc2 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_14_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC3 u =
  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.15.1; srcPort = 59949u16; dstPort = 2895u16; protocol = 6u8; flowSize = 836.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.15.1; srcPort = 63175u16; dstPort = 63877u16; protocol = 6u8; flowSize = 920.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.15.1; srcPort = 60112u16; dstPort = 22188u16; protocol = 17u8; flowSize = 565.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.15.1; srcPort = 54468u16; dstPort = 36837u16; protocol = 17u8; flowSize = 429.0})
  else  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.15.1; srcPort = 42805u16; dstPort = 8521u16; protocol = 6u8; flowSize = 870.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.15.1; srcPort = 32964u16; dstPort = 63766u16; protocol = 6u8; flowSize = 631.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.15.1; srcPort = 9256u16; dstPort = 51419u16; protocol = 17u8; flowSize = 500.0})
  else None

let fwdOutTc3 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_15_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC4 u =
  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.18.1; srcPort = 33658u16; dstPort = 25500u16; protocol = 6u8; flowSize = 790.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.18.1; srcPort = 63612u16; dstPort = 43001u16; protocol = 6u8; flowSize = 870.0})
  else  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.18.1; srcPort = 30787u16; dstPort = 40540u16; protocol = 6u8; flowSize = 870.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.18.1; srcPort = 31514u16; dstPort = 31535u16; protocol = 17u8; flowSize = 534.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.18.1; srcPort = 10259u16; dstPort = 40970u16; protocol = 6u8; flowSize = 406.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.18.1; srcPort = 42304u16; dstPort = 8485u16; protocol = 17u8; flowSize = 473.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.18.1; srcPort = 30832u16; dstPort = 24093u16; protocol = 6u8; flowSize = 597.0})
  else None

let fwdOutTc4 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_18_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC5 u =
  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.19.1; srcPort = 4772u16; dstPort = 24837u16; protocol = 6u8; flowSize = 631.0})
  else  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.19.1; srcPort = 53073u16; dstPort = 37597u16; protocol = 6u8; flowSize = 597.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.19.1; srcPort = 8696u16; dstPort = 41047u16; protocol = 17u8; flowSize = 632.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.19.1; srcPort = 21366u16; dstPort = 23701u16; protocol = 6u8; flowSize = 343.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.19.1; srcPort = 51951u16; dstPort = 22897u16; protocol = 6u8; flowSize = 388.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.19.1; srcPort = 56086u16; dstPort = 11928u16; protocol = 17u8; flowSize = 295.0})
  else  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.19.1; srcPort = 65509u16; dstPort = 58585u16; protocol = 6u8; flowSize = 574.0})
  else None

let fwdOutTc5 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_19_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC6 u =
  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.6.1; srcPort = 21217u16; dstPort = 2617u16; protocol = 17u8; flowSize = 920.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.6.1; srcPort = 60687u16; dstPort = 1351u16; protocol = 17u8; flowSize = 632.0})
  else  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.6.1; srcPort = 51925u16; dstPort = 57280u16; protocol = 17u8; flowSize = 870.0})
  else  if (u = 19n) then
    Some ({srcIp = 70.0.7.1; dstIp = 70.0.6.1; srcPort = 47533u16; dstPort = 56045u16; protocol = 6u8; flowSize = 565.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.6.1; srcPort = 14211u16; dstPort = 46873u16; protocol = 6u8; flowSize = 430.0})
  else  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.6.1; srcPort = 19911u16; dstPort = 29803u16; protocol = 17u8; flowSize = 836.0})
  else  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.6.1; srcPort = 61242u16; dstPort = 4928u16; protocol = 17u8; flowSize = 500.0})
  else None

let fwdOutTc6 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_6_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


let initTC7 u =
  if (u = 12n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.7.1; srcPort = 15719u16; dstPort = 25787u16; protocol = 6u8; flowSize = 307.0})
  else  if (u = 15n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.7.1; srcPort = 195u16; dstPort = 19682u16; protocol = 17u8; flowSize = 565.0})
  else  if (u = 14n) then
    Some ({srcIp = 70.0.14.1; dstIp = 70.0.7.1; srcPort = 56232u16; dstPort = 1171u16; protocol = 6u8; flowSize = 264.0})
  else  if (u = 18n) then
    Some ({srcIp = 70.0.6.1; dstIp = 70.0.7.1; srcPort = 65250u16; dstPort = 17350u16; protocol = 17u8; flowSize = 565.0})
  else  if (u = 13n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.7.1; srcPort = 26115u16; dstPort = 34192u16; protocol = 6u8; flowSize = 513.0})
  else  if (u = 16n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.7.1; srcPort = 35903u16; dstPort = 21856u16; protocol = 6u8; flowSize = 534.0})
  else  if (u = 17n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.7.1; srcPort = 7139u16; dstPort = 46670u16; protocol = 6u8; flowSize = 388.0})
  else None

let fwdOutTc7 e (fs : [C]option[flow]) =
  match fwdOut (rib_70_0_7_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | _ -> None


forward (hVTc0,hETc0) = (initTC0, fwdOutTc0, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc1,hETc1) = (initTC1, fwdOutTc1, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc2,hETc2) = (initTC2, fwdOutTc2, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc3,hETc3) = (initTC3, fwdOutTc3, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc4,hETc4) = (initTC4, fwdOutTc4, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc5,hETc5) = (initTC5, fwdOutTc5, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc6,hETc6) = (initTC6, fwdOutTc6, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc7,hETc7) = (initTC7, fwdOutTc7, fwdIn, hinitV, hinitE, logV, logE, None)


@noinline let linkUtilization0 e = hETc0[e] +. hETc1[e]

@noinline let linkUtilization1 e = (linkUtilization0 e) +. hETc2[e]

@noinline let linkUtilization2 e = (linkUtilization1 e) +. hETc3[e]

@noinline let linkUtilization3 e = (linkUtilization2 e) +. hETc4[e]

@noinline let linkUtilization4 e = (linkUtilization3 e) +. hETc5[e]

@noinline let linkUtilization5 e = (linkUtilization4 e) +. hETc6[e]

@noinline let linkUtilization6 e = (linkUtilization5 e) +. hETc7[e]

(*
@noinline let linkUtilization1 e = hETc0[e] +. hETc1[e] +. hETc2[e]
@noinline let linkUtilization2 e = hETc5[e] +. hETc6[e] +. hETc7[e]
@noinline let linkUtilization3 e = hETc4[e] +. hETc3[e]
@noinline let linkUtilization4 e = (linkUtilization1 e) +. (linkUtilization2 e)
@noinline let linkUtilization6 e = (linkUtilization3 e) +. (linkUtilization4 e)*)

(*@noinline let linkUtilization1 e = hETc0[e] +. hETc1[e] +. hETc2[e]
@noinline let linkUtilization2 e = hETc5[e] +. hETc6[e] +. hETc7[e]
@noinline let linkUtilization3 e = hETc4[e] +. hETc3[e] +. (linkUtilization1 e)
@noinline let linkUtilization6 e = (linkUtilization2 e) +. (linkUtilization3 e)*)

assert("Link(edge-19,Serial1 --> aggregation-17,Serial1", linkUtilization6 (17~3) <. 40000.0)
assert("Link(core-1,Serial3 --> aggregation-16,Serial3", linkUtilization6 (9~2) <. 40000.0)
assert("Link(aggregation-17,Serial1 --> edge-19,Serial1", linkUtilization6 (3~17) <. 40000.0)
assert("Link(edge-11,Serial1 --> aggregation-9,Serial1", linkUtilization6 (13~7) <. 40000.0)
assert("Link(aggregation-5,Serial0 --> edge-6,Serial1", linkUtilization6 (5~18) <. 40000.0)
assert("Link(aggregation-13,Serial1 --> edge-15,Serial1", linkUtilization6 (1~15) <. 40000.0)
assert("Link(aggregation-16,Serial0 --> edge-18,Serial0", linkUtilization6 (2~16) <. 40000.0)
assert("Link(edge-10,Serial0 --> aggregation-8,Serial0", linkUtilization6 (12~6) <. 40000.0)
assert("Link(aggregation-5,Serial3 --> core-3,Serial0", linkUtilization6 (5~11) <. 40000.0)
assert("Link(aggregation-4,Serial2 --> core-0,Serial0", linkUtilization6 (4~8) <. 40000.0)
assert("Link(edge-14,Serial0 --> aggregation-12,Serial0", linkUtilization6 (14~0) <. 40000.0)
assert("Link(aggregation-9,Serial0 --> edge-10,Serial1", linkUtilization6 (7~12) <. 40000.0)
assert("Link(edge-15,Serial1 --> aggregation-13,Serial1", linkUtilization6 (15~1) <. 40000.0)
assert("Link(edge-18,Serial0 --> aggregation-16,Serial0", linkUtilization6 (16~2) <. 40000.0)
assert("Link(aggregation-8,Serial3 --> core-1,Serial1", linkUtilization6 (6~9) <. 40000.0)
assert("Link(core-3,Serial3 --> aggregation-17,Serial3", linkUtilization6 (11~3) <. 40000.0)
assert("Link(aggregation-17,Serial2 --> core-2,Serial3", linkUtilization6 (3~10) <. 40000.0)
assert("Link(aggregation-4,Serial1 --> edge-7,Serial0", linkUtilization6 (4~19) <. 40000.0)
assert("Link(aggregation-4,Serial3 --> core-1,Serial0", linkUtilization6 (4~9) <. 40000.0)
assert("Link(core-2,Serial0 --> aggregation-5,Serial2", linkUtilization6 (10~5) <. 40000.0)
assert("Link(aggregation-13,Serial2 --> core-2,Serial2", linkUtilization6 (1~10) <. 40000.0)
assert("Link(core-0,Serial0 --> aggregation-4,Serial2", linkUtilization6 (8~4) <. 40000.0)
assert("Link(edge-14,Serial1 --> aggregation-13,Serial0", linkUtilization6 (14~1) <. 40000.0)
assert("Link(edge-18,Serial1 --> aggregation-17,Serial0", linkUtilization6 (16~3) <. 40000.0)
assert("Link(aggregation-5,Serial1 --> edge-7,Serial1", linkUtilization6 (5~19) <. 40000.0)
assert("Link(aggregation-9,Serial3 --> core-3,Serial1", linkUtilization6 (7~11) <. 40000.0)
assert("Link(aggregation-4,Serial0 --> edge-6,Serial0", linkUtilization6 (4~18) <. 40000.0)
assert("Link(aggregation-8,Serial2 --> core-0,Serial1", linkUtilization6 (6~8) <. 40000.0)
assert("Link(aggregation-12,Serial2 --> core-0,Serial2", linkUtilization6 (0~8) <. 40000.0)
assert("Link(core-0,Serial2 --> aggregation-12,Serial2", linkUtilization6 (8~0) <. 40000.0)
assert("Link(core-2,Serial2 --> aggregation-13,Serial2", linkUtilization6 (10~1) <. 40000.0)
assert("Link(aggregation-17,Serial3 --> core-3,Serial3", linkUtilization6 (3~11) <. 40000.0)
assert("Link(edge-7,Serial0 --> aggregation-4,Serial1", linkUtilization6 (19~4) <. 40000.0)
assert("Link(aggregation-16,Serial1 --> edge-19,Serial0", linkUtilization6 (2~17) <. 40000.0)
assert("Link(aggregation-12,Serial1 --> edge-15,Serial0", linkUtilization6 (0~15) <. 40000.0)
assert("Link(aggregation-9,Serial2 --> core-2,Serial1", linkUtilization6 (7~10) <. 40000.0)
assert("Link(aggregation-13,Serial3 --> core-3,Serial2", linkUtilization6 (1~11) <. 40000.0)
assert("Link(edge-11,Serial0 --> aggregation-8,Serial1", linkUtilization6 (13~6) <. 40000.0)
assert("Link(edge-15,Serial0 --> aggregation-12,Serial1", linkUtilization6 (15~0) <. 40000.0)
assert("Link(core-3,Serial0 --> aggregation-5,Serial3", linkUtilization6 (11~5) <. 40000.0)
assert("Link(edge-19,Serial0 --> aggregation-16,Serial1", linkUtilization6 (17~2) <. 40000.0)
assert("Link(core-1,Serial0 --> aggregation-4,Serial3", linkUtilization6 (9~4) <. 40000.0)
assert("Link(core-3,Serial1 --> aggregation-9,Serial3", linkUtilization6 (11~7) <. 40000.0)
assert("Link(aggregation-8,Serial0 --> edge-10,Serial0", linkUtilization6 (6~12) <. 40000.0)
assert("Link(edge-7,Serial1 --> aggregation-5,Serial1", linkUtilization6 (19~5) <. 40000.0)
assert("Link(aggregation-5,Serial2 --> core-2,Serial0", linkUtilization6 (5~10) <. 40000.0)
assert("Link(core-1,Serial1 --> aggregation-8,Serial3", linkUtilization6 (9~6) <. 40000.0)
assert("Link(aggregation-9,Serial1 --> edge-11,Serial1", linkUtilization6 (7~13) <. 40000.0)
assert("Link(edge-6,Serial0 --> aggregation-4,Serial0", linkUtilization6 (18~4) <. 40000.0)
assert("Link(aggregation-17,Serial0 --> edge-18,Serial1", linkUtilization6 (3~16) <. 40000.0)
assert("Link(aggregation-13,Serial0 --> edge-14,Serial1", linkUtilization6 (1~14) <. 40000.0)
assert("Link(core-2,Serial3 --> aggregation-17,Serial2", linkUtilization6 (10~3) <. 40000.0)
assert("Link(core-0,Serial3 --> aggregation-16,Serial2", linkUtilization6 (8~2) <. 40000.0)
assert("Link(aggregation-16,Serial3 --> core-1,Serial3", linkUtilization6 (2~9) <. 40000.0)
assert("Link(core-1,Serial2 --> aggregation-12,Serial3", linkUtilization6 (9~0) <. 40000.0)
assert("Link(core-3,Serial2 --> aggregation-13,Serial3", linkUtilization6 (11~1) <. 40000.0)
assert("Link(aggregation-16,Serial2 --> core-0,Serial3", linkUtilization6 (2~8) <. 40000.0)
assert("Link(edge-10,Serial1 --> aggregation-9,Serial0", linkUtilization6 (12~7) <. 40000.0)
assert("Link(core-2,Serial1 --> aggregation-9,Serial2", linkUtilization6 (10~7) <. 40000.0)
assert("Link(aggregation-8,Serial1 --> edge-11,Serial0", linkUtilization6 (6~13) <. 40000.0)
assert("Link(core-0,Serial1 --> aggregation-8,Serial2", linkUtilization6 (8~6) <. 40000.0)
assert("Link(aggregation-12,Serial0 --> edge-14,Serial0", linkUtilization6 (0~14) <. 40000.0)
assert("Link(aggregation-12,Serial3 --> core-1,Serial2", linkUtilization6 (0~9) <. 40000.0)
assert("Link(edge-6,Serial1 --> aggregation-5,Serial0", linkUtilization6 (18~5) <. 40000.0)
