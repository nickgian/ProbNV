include "LinkFaults2/SP4MultiAS_2_linkFaults.nv"

type flow = {srcIp: int; dstIp: int; srcPort:int16; dstPort:int16; protocol: int8; flowSize:float }

let aclOut edge fs = 
  match edge with
  | _ -> true

let split fs npaths = {fs with flowSize = fs.flowSize /. npaths}

let fwdOut (r : [C]rib) e (fs : [C]option[flow])  = 
  match fs with
  | None -> None
  | Some fs -> 
     (match r.selected with
       | None -> None
       | Some 0u2 -> Some None
       | Some 1u2 -> Some None
       | Some 2u2 -> (match r.ospf with
                 | None -> None (*can't happen *) 
                 | Some o -> (
                   if o.ospfNextHop = {} then Some None else
                 if o.ospfNextHop[e] && (aclOut e fs) then Some (Some (split fs (size o.ospfNextHop true))) else None))
        | Some 3u2 -> (match r.bgp with
                 | None -> None (*can't happen *)
                 | Some b -> (
                   if b.bgpNextHop = {} then Some None else
                 if b.bgpNextHop[e] && (aclOut e fs) then Some (Some (split fs (size b.bgpNextHop true))) else None))
      )

let aclIn edge fs = 
  match edge with
  | _ -> true

let fwdIn e fs = if aclIn e fs then fs else None

let hinitV u = 0.0

let logV u fs nodeHistory = 0.0

let hinitE e = 0.0

let logE e fs edgeHistory =
  match fs with
  | None -> edgeHistory
  | Some f -> f.flowSize +. edgeHistory

let initTC0 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.6.1; srcPort = 55216u16; dstPort = 30609u16; protocol = 17u8; flowSize = 173.0})
  else None

let fwdOutTc0 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_6_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


(*let initTC1 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.7.1; srcPort = 27956u16; dstPort = 18712u16; protocol = 17u8; flowSize = 94.0})
  else None

let fwdOutTc1 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_7_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC2 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.10.1; srcPort = 14978u16; dstPort = 58668u16; protocol = 6u8; flowSize = 98.0})
  else None

let fwdOutTc2 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_10_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC3 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.11.1; srcPort = 16808u16; dstPort = 17821u16; protocol = 17u8; flowSize = 44.0})
  else None

let fwdOutTc3 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_11_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC4 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.14.1; srcPort = 59771u16; dstPort = 5227u16; protocol = 6u8; flowSize = 62.0})
  else None

let fwdOutTc4 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_14_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC5 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.18.1; srcPort = 58184u16; dstPort = 13138u16; protocol = 17u8; flowSize = 368.0})
  else None

let fwdOutTc5 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_18_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC6 u =
  if (u = 0n) then
    Some ({srcIp = 70.0.15.1; dstIp = 70.0.19.1; srcPort = 14401u16; dstPort = 34738u16; protocol = 6u8; flowSize = 77.0})
  else None

let fwdOutTc6 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_19_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC7 u =
  if (u = 2n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.6.1; srcPort = 53552u16; dstPort = 19573u16; protocol = 6u8; flowSize = 335.0})
  else None

let fwdOutTc7 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_6_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC8 u =
  if (u = 2n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.7.1; srcPort = 13353u16; dstPort = 54304u16; protocol = 6u8; flowSize = 355.0})
  else None

let fwdOutTc8 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_7_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC9 u =
  if (u = 2n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.10.1; srcPort = 10487u16; dstPort = 21684u16; protocol = 17u8; flowSize = 291.0})
  else None

let fwdOutTc9 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_10_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC10 u =
  if (u = 2n) then
    Some ({srcIp = 70.0.18.1; dstIp = 70.0.19.1; srcPort = 40112u16; dstPort = 16234u16; protocol = 6u8; flowSize = 351.0})
  else None

let fwdOutTc10 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_19_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC11 u =
  if (u = 5n) then
    Some ({srcIp = 70.0.11.1; dstIp = 70.0.18.1; srcPort = 16702u16; dstPort = 34092u16; protocol = 17u8; flowSize = 246.0})
  else None

let fwdOutTc11 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_18_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC12 u =
  if (u = 10n) then
    Some ({srcIp = 70.0.19.1; dstIp = 70.0.11.1; srcPort = 30970u16; dstPort = 3883u16; protocol = 17u8; flowSize = 151.0})
  else None

let fwdOutTc12 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_11_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC13 u =
  if (u = 19n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.7.1; srcPort = 35117u16; dstPort = 65026u16; protocol = 6u8; flowSize = 487.0})
  else None

let fwdOutTc13 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_7_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None


let initTC14 u =
  if (u = 19n) then
    Some ({srcIp = 70.0.10.1; dstIp = 70.0.18.1; srcPort = 11432u16; dstPort = 11158u16; protocol = 6u8; flowSize = 299.0})
  else None

let fwdOutTc14 e (fs : [C]option[flow])  =
  match fwdOut (rib_70_0_18_0_24[let (u~v) = e in u]) e fs with
  | Some (Some fs) -> Some fs
  | Some None -> None
  | None -> None*)


forward (hVTc0,hETc0) = (initTC0, fwdOutTc0, fwdIn, hinitV, hinitE, logV, logE, None)
(*forward (hVTc1,hETc1) = (initTC1, fwdOutTc1, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc2,hETc2) = (initTC2, fwdOutTc2, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc3,hETc3) = (initTC3, fwdOutTc3, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc4,hETc4) = (initTC4, fwdOutTc4, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc5,hETc5) = (initTC5, fwdOutTc5, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc6,hETc6) = (initTC6, fwdOutTc6, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc7,hETc7) = (initTC7, fwdOutTc7, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc8,hETc8) = (initTC8, fwdOutTc8, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc9,hETc9) = (initTC9, fwdOutTc9, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc10,hETc10) = (initTC10, fwdOutTc10, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc11,hETc11) = (initTC11, fwdOutTc11, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc12,hETc12) = (initTC12, fwdOutTc12, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc13,hETc13) = (initTC13, fwdOutTc13, fwdIn, hinitV, hinitE, logV, logE, None)
forward (hVTc14,hETc14) = (initTC14, fwdOutTc14, fwdIn, hinitV, hinitE, logV, logE, None)
*)

@noinline let linkUtilization13 e = hETc0[e]
(*@noinline let linkUtilization0 e = hETc0[e] +. hETc1[e]

@noinline let linkUtilization1 e = (linkUtilization0 e) +. hETc2[e]

@noinline let linkUtilization2 e = (linkUtilization1 e) +. hETc3[e]

@noinline let linkUtilization3 e = (linkUtilization2 e) +. hETc4[e]

@noinline let linkUtilization4 e = (linkUtilization3 e) +. hETc5[e]

@noinline let linkUtilization5 e = (linkUtilization4 e) +. hETc6[e]

@noinline let linkUtilization6 e = (linkUtilization5 e) +. hETc7[e]

@noinline let linkUtilization7 e = (linkUtilization6 e) +. hETc8[e]

@noinline let linkUtilization8 e = (linkUtilization7 e) +. hETc9[e]

@noinline let linkUtilization9 e = (linkUtilization8 e) +. hETc10[e]

@noinline let linkUtilization10 e = (linkUtilization9 e) +. hETc11[e]

@noinline let linkUtilization11 e = (linkUtilization10 e) +. hETc12[e]

@noinline let linkUtilization12 e = (linkUtilization11 e) +. hETc13[e]

@noinline let linkUtilization13 e = (linkUtilization12 e) +. hETc14[e]
*)
let ltf0_1 = f0 <e f1
let eqf0_1 = f0 = f1
let ord1 = eqf0_1
let ord2 = ltf0_1
let ord = (failures = 0u2) ||  ((failures = 1u2) && ord1) ||  ((failures = 2u2) && ord2)

assert("Link(edge-19,Serial1 --> aggregation-17,Serial1", linkUtilization13 (10~6) <. 10000.0 | ord)
assert("Link(core-1,Serial3 --> aggregation-16,Serial3", linkUtilization13 (1~8) <. 10000.0 | ord)
assert("Link(aggregation-17,Serial1 --> edge-19,Serial1", linkUtilization13 (6~10) <. 10000.0 | ord)
assert("Link(edge-11,Serial1 --> aggregation-9,Serial1", linkUtilization13 (5~15) <. 10000.0 | ord)
assert("Link(aggregation-5,Serial0 --> edge-6,Serial1", linkUtilization13 (13~11) <. 10000.0 | ord)
assert("Link(aggregation-13,Serial1 --> edge-15,Serial1", linkUtilization13 (17~0) <. 10000.0 | ord)
assert("Link(aggregation-16,Serial0 --> edge-18,Serial0", linkUtilization13 (8~2) <. 10000.0 | ord)
assert("Link(edge-10,Serial0 --> aggregation-8,Serial0", linkUtilization13 (19~16) <. 10000.0 | ord)
assert("Link(aggregation-5,Serial3 --> core-3,Serial0", linkUtilization13 (13~4) <. 10000.0 | ord)
assert("Link(aggregation-4,Serial2 --> core-0,Serial0", linkUtilization13 (14~3) <. 10000.0 | ord)
assert("Link(edge-14,Serial0 --> aggregation-12,Serial0", linkUtilization13 (9~18) <. 10000.0 | ord)
assert("Link(aggregation-9,Serial0 --> edge-10,Serial1", linkUtilization13 (15~19) <. 10000.0 | ord)
assert("Link(edge-15,Serial1 --> aggregation-13,Serial1", linkUtilization13 (0~17) <. 10000.0 | ord)
assert("Link(edge-18,Serial0 --> aggregation-16,Serial0", linkUtilization13 (2~8) <. 10000.0 | ord)
assert("Link(aggregation-8,Serial3 --> core-1,Serial1", linkUtilization13 (16~1) <. 10000.0 | ord)
assert("Link(aggregation-17,Serial2 --> core-2,Serial3", linkUtilization13 (6~7) <. 10000.0 | ord)
assert("Link(core-3,Serial3 --> aggregation-17,Serial3", linkUtilization13 (4~6) <. 10000.0 | ord)
assert("Link(aggregation-4,Serial1 --> edge-7,Serial0", linkUtilization13 (14~12) <. 10000.0 | ord)
assert("Link(aggregation-4,Serial3 --> core-1,Serial0", linkUtilization13 (14~1) <. 10000.0 | ord)
assert("Link(core-0,Serial0 --> aggregation-4,Serial2", linkUtilization13 (3~14) <. 10000.0 | ord)
assert("Link(aggregation-13,Serial2 --> core-2,Serial2", linkUtilization13 (17~7) <. 10000.0 | ord)
assert("Link(core-2,Serial0 --> aggregation-5,Serial2", linkUtilization13 (7~13) <. 10000.0 | ord)
assert("Link(edge-14,Serial1 --> aggregation-13,Serial0", linkUtilization13 (9~17) <. 40.0 | ord)
assert("Link(edge-18,Serial1 --> aggregation-17,Serial0", linkUtilization13 (2~6) <. 10000.0 | ord)
assert("Link(aggregation-5,Serial1 --> edge-7,Serial1", linkUtilization13 (13~12) <. 10000.0 | ord)
assert("Link(aggregation-9,Serial3 --> core-3,Serial1", linkUtilization13 (15~4) <. 10000.0 | ord)
assert("Link(aggregation-4,Serial0 --> edge-6,Serial0", linkUtilization13 (14~11) <. 10000.0 | ord)
assert("Link(aggregation-8,Serial2 --> core-0,Serial1", linkUtilization13 (16~3) <. 10000.0 | ord)
assert("Link(core-0,Serial2 --> aggregation-12,Serial2", linkUtilization13 (3~18) <. 10000.0 | ord)
assert("Link(aggregation-12,Serial2 --> core-0,Serial2", linkUtilization13 (18~3) <. 10000.0 | ord)
assert("Link(core-2,Serial2 --> aggregation-13,Serial2", linkUtilization13 (7~17) <. 10000.0 | ord)
assert("Link(aggregation-17,Serial3 --> core-3,Serial3", linkUtilization13 (6~4) <. 10000.0 | ord)
assert("Link(edge-7,Serial0 --> aggregation-4,Serial1", linkUtilization13 (12~14) <. 10000.0 | ord)
assert("Link(aggregation-16,Serial1 --> edge-19,Serial0", linkUtilization13 (8~10) <. 10000.0 | ord)
assert("Link(aggregation-12,Serial1 --> edge-15,Serial0", linkUtilization13 (18~0) <. 10000.0 | ord)
assert("Link(aggregation-9,Serial2 --> core-2,Serial1", linkUtilization13 (15~7) <. 10000.0 | ord)
assert("Link(aggregation-13,Serial3 --> core-3,Serial2", linkUtilization13 (17~4) <. 10000.0 | ord)
assert("Link(edge-15,Serial0 --> aggregation-12,Serial1", linkUtilization13 (0~18) <. 10000.0 | ord)
assert("Link(edge-11,Serial0 --> aggregation-8,Serial1", linkUtilization13 (5~16) <. 10000.0 | ord)
assert("Link(core-3,Serial0 --> aggregation-5,Serial3", linkUtilization13 (4~13) <. 10000.0 | ord)
assert("Link(core-1,Serial0 --> aggregation-4,Serial3", linkUtilization13 (1~14) <. 10000.0 | ord)
assert("Link(edge-19,Serial0 --> aggregation-16,Serial1", linkUtilization13 (10~8) <. 10000.0 | ord)
assert("Link(core-3,Serial1 --> aggregation-9,Serial3", linkUtilization13 (4~15) <. 10000.0 | ord)
assert("Link(aggregation-8,Serial0 --> edge-10,Serial0", linkUtilization13 (16~19) <. 10000.0 | ord)
assert("Link(edge-7,Serial1 --> aggregation-5,Serial1", linkUtilization13 (12~13) <. 10000.0 | ord)
assert("Link(aggregation-5,Serial2 --> core-2,Serial0", linkUtilization13 (13~7) <. 10000.0 | ord)
assert("Link(core-1,Serial1 --> aggregation-8,Serial3", linkUtilization13 (1~16) <. 10000.0 | ord)
assert("Link(aggregation-9,Serial1 --> edge-11,Serial1", linkUtilization13 (15~5) <. 10000.0 | ord)
assert("Link(edge-6,Serial0 --> aggregation-4,Serial0", linkUtilization13 (11~14) <. 10000.0 | ord)
assert("Link(aggregation-17,Serial0 --> edge-18,Serial1", linkUtilization13 (6~2) <. 10000.0 | ord)
assert("Link(aggregation-13,Serial0 --> edge-14,Serial1", linkUtilization13 (17~9) <. 10000.0 | ord)
assert("Link(core-2,Serial3 --> aggregation-17,Serial2", linkUtilization13 (7~6) <. 10000.0 | ord)
assert("Link(core-0,Serial3 --> aggregation-16,Serial2", linkUtilization13 (3~8) <. 10000.0 | ord)
assert("Link(aggregation-16,Serial3 --> core-1,Serial3", linkUtilization13 (8~1) <. 10000.0 | ord)
assert("Link(core-1,Serial2 --> aggregation-12,Serial3", linkUtilization13 (1~18) <. 10000.0 | ord)
assert("Link(core-3,Serial2 --> aggregation-13,Serial3", linkUtilization13 (4~17) <. 10000.0 | ord)
assert("Link(aggregation-16,Serial2 --> core-0,Serial3", linkUtilization13 (8~3) <. 10000.0 | ord)
assert("Link(edge-10,Serial1 --> aggregation-9,Serial0", linkUtilization13 (19~15) <. 10000.0 | ord)
assert("Link(core-0,Serial1 --> aggregation-8,Serial2", linkUtilization13 (3~16) <. 10000.0 | ord)
assert("Link(core-2,Serial1 --> aggregation-9,Serial2", linkUtilization13 (7~15) <. 10000.0 | ord)
assert("Link(aggregation-8,Serial1 --> edge-11,Serial0", linkUtilization13 (16~5) <. 10000.0 | ord)
assert("Link(aggregation-12,Serial0 --> edge-14,Serial0", linkUtilization13 (18~9) <. 10000.0 | ord)
assert("Link(aggregation-12,Serial3 --> core-1,Serial2", linkUtilization13 (18~1) <. 10000.0 | ord)
assert("Link(edge-6,Serial1 --> aggregation-5,Serial0", linkUtilization13 (11~13) <. 10000.0 | ord)
