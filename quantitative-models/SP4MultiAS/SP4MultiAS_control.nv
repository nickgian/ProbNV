(* models bgp, ospf, static routes, nexthop, AS Path as set, multipath *)

type prefix = (int, int6) (* IP prefix; tuple of (address, length) *)
type ospfType = {ospfAd: int8; weight: int16; areaType:int2; areaId: int; ospfNextHop: set[tedge];}
type bgpType = {bgpAd: int8; lp: int; aslen: int; med:int; comms:set[int]; bgpNextHop: set[tedge]; bgpAS: set[tnode];}
type rib = {
    connected:option[int8]; (* Just track administrative distance *)
    static:option[int8]; (* Just track administrative distance *)
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int2]; (* Which protocol has the best route *) }
type attribute = rib

(* Definitions for the "best" field *)
let p_CONNECTED = 0u2
let p_STATIC = 1u2
let p_OSPF = 2u2
let p_BGP = 3u2

(** Useful helper definitions **)

let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE1 = 2u2
let ospfE2 = 3u2

(* Check if the selected protocol is x *)
let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y

let flipEdge e = 
  match e with  | a~b -> toEdge b a

let getSourceNode e = 
  match e with  | a~b -> a

let min x y = x <u8 y

(* Compute the better of x and y according to f *)
(* Return a boolean (true for x, false for y) for efficiency reasons *)
let pickOption f x y =
  match (x,y) with
  | (None, _) -> false  | (_, None) -> true
  | (Some a, Some b) -> f a b

let pickMinOption = pickOption min

let union (s1 : [C]dict[[C]tedge, [C]bool]) (s2 : [C]dict[[C]tedge, [C]bool]) = combine (fun x y -> x || y) s1 s2

(* OSPF Route ranking: first compare areas, then weights. 
  Multipath is applied by default if enabled during translation.*)
let betterOspf o1 o2 =
  if o1.areaType <u2 o2.areaType then o1
  else if o2.areaType <u2 o1.areaType then o2
  else if o1.weight <u16 o2.weight then o1
  else if o2.weight <u16 o1.weight then o2
  else {o1 with ospfNextHop = union o1.ospfNextHop o2.ospfNextHop}

let mergeOption f x y =
  match (x,y) with
  | (None, _) -> y  | (_, None) -> x
  | (Some a, Some b) -> Some (f a b)

(* BGP Route ranking: first compare local pref, then path length, then MED. 
       If multipath is disabled then tie-break is arbitrary (normally, the router id should be used) *)
let betterBgp multiPath b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2
  else if b1.med < b2.med then b1
  else if b1.med > b2.med then b2
  else if multiPath then {b1 with bgpNextHop = union b1.bgpNextHop b2.bgpNextHop}
  else b1

(* Determine which of the four protocols has the best route by comparing their ADs *)
let best c s o b =
  match (c,s,o,b) with
  (* If no protocol has a route, then we have no route at all *)
  | (None,None,None,None) -> None
  | _ -> 
      (* Otherwise, get administrative distances for osfp and bgp... *)
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      (* ...and figure out which of the protocols has the lowest AD *)
      let (x,p1) = if pickMinOption c s then (c,p_CONNECTED) else (s,p_STATIC) in
      let (y,p2) = if pickMinOption o b then (o,p_OSPF) else (b,p_BGP) in
      Some (if pickMinOption x y then p1 else p2)

(* Compute the best route for each protocol individually, then select the best one *)
let mergeValues bgpMultiPathEnabled x y =
  let c = if (pickMinOption x.connected y.connected) then x.connected else y.connected in
  let s = if (pickMinOption x.static y.static) then x.static else y.static in
  let o = mergeOption betterOspf x.ospf y.ospf in
  let b = mergeOption (betterBgp bgpMultiPathEnabled) x.bgp y.bgp in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y =
  mergeValues true x y

let init d node =
  match node with
  | 15n -> 
if d = (70.0.15.2/31) || d = (70.0.15.0/32) || d = (10.0.11.0/31) || d = (10.0.9.0/31) || d = (70.0.15.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.15.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 9n -> 
if d = (10.0.23.0/31) || d = (10.0.22.0/31) || d = (10.0.21.0/31) || d = (10.0.20.0/31) || d = (70.0.1.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 16n -> 
if d = (70.0.18.0/31) || d = (70.0.18.0/32) || d = (70.0.18.2/31) || d = (10.0.14.0/31) || d = (10.0.12.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.18.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 8n -> 
if d = (10.0.19.0/31) || d = (10.0.18.0/31) || d = (10.0.17.0/31) || d = (10.0.16.0/31) || d = (70.0.0.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 11n -> 
if d = (10.0.31.0/31) || d = (10.0.30.0/31) || d = (10.0.29.0/31) || d = (10.0.28.0/31) || d = (70.0.3.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 13n -> 
if d = (70.0.11.2/31) || d = (10.0.7.0/31) || d = (10.0.5.0/31) || d = (70.0.11.0/32) || d = (70.0.11.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.11.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 3n -> 
if d = (10.0.31.0/31) || d = (10.0.27.0/31) || d = (70.0.17.0/32) || d = (10.0.15.0/31) || d = (10.0.14.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 10n -> 
if d = (10.0.24.0/31) || d = (10.0.27.0/31) || d = (10.0.26.0/31) || d = (10.0.25.0/31) || d = (70.0.2.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 2n -> 
if d = (10.0.23.0/31) || d = (10.0.19.0/31) || d = (70.0.16.0/32) || d = (10.0.13.0/31) || d = (10.0.12.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 14n -> 
if d = (70.0.14.2/31) || d = (10.0.8.0/31) || d = (70.0.14.0/32) || d = (10.0.10.0/31) || d = (70.0.14.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.14.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 17n -> 
if d = (70.0.19.0/31) || d = (70.0.19.0/32) || d = (70.0.19.2/31) || d = (10.0.15.0/31) || d = (10.0.13.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.19.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 18n -> 
if d = (70.0.6.2/31) || d = (10.0.2.0/31) || d = (10.0.0.0/31) || d = (70.0.6.0/31) || d = (70.0.6.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.6.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 19n -> 
if d = (70.0.7.2/31) || d = (10.0.3.0/31) || d = (10.0.1.0/31) || d = (70.0.7.0/31) || d = (70.0.7.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.7.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 5n -> 
if d = (10.0.24.0/31) || d = (10.0.28.0/31) || d = (10.0.3.0/31) || d = (10.0.2.0/31) || d = (70.0.5.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 4n -> 
if d = (10.0.20.0/31) || d = (10.0.1.0/31) || d = (10.0.0.0/31) || d = (10.0.16.0/31) || d = (70.0.4.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 7n -> 
if d = (10.0.29.0/31) || d = (10.0.25.0/31) || d = (10.0.7.0/31) || d = (10.0.6.0/31) || d = (70.0.9.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 6n -> 
if d = (10.0.21.0/31) || d = (10.0.17.0/31) || d = (10.0.5.0/31) || d = (10.0.4.0/31) || d = (70.0.8.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 1n -> 
if d = (10.0.30.0/31) || d = (10.0.26.0/31) || d = (70.0.13.0/32) || d = (10.0.11.0/31) || d = (10.0.10.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 0n -> 
if d = (10.0.22.0/31) || d = (10.0.18.0/31) || d = (10.0.8.0/31) || d = (70.0.12.0/32) || d = (10.0.9.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 12n -> 
if d = (70.0.10.2/31) || d = (10.0.6.0/31) || d = (10.0.4.0/31) || d = (70.0.10.0/32) || d = (70.0.10.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.10.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop={}; bgpAS={}} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | _ -> {connected=None; static=None; ospf=None; bgp=None; selected=None;}

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
     match edge with
     | _ -> None)

 let transferBgp d e x0 =
  let (prefix, prefixLen) = d in
let prot = x0.selected in
 match e with
   | (15~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.15.0) && (prefix < 70.0.16.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (15~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.15.0) && (prefix < 70.0.16.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (9~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (9~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (9~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (9~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (16~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.18.0) && (prefix < 70.0.19.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (16~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.18.0) && (prefix < 70.0.19.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (8~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (8~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (8~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (8~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (11~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (11~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (11~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (11~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (13~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.11.0) && (prefix < 70.0.12.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (13~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.11.0) && (prefix < 70.0.12.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (3~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (10~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (2~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (2~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (2~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (2~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (14~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.14.0) && (prefix < 70.0.15.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (14~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.14.0) && (prefix < 70.0.15.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (17~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.19.0) && (prefix < 70.0.20.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (17~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.19.0) && (prefix < 70.0.20.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (18~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.6.0) && (prefix < 70.0.7.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (18~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.6.0) && (prefix < 70.0.7.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (19~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.7.0) && (prefix < 70.0.8.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (19~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.7.0) && (prefix < 70.0.8.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (5~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (4~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (4~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (4~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (4~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (7~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (7~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (7~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (7~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (6~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (6~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (6~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (6~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (1~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (1~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (1~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (1~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (0~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (0~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (0~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (0~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (12~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.10.0) && (prefix < 70.0.11.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | (12~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        if (let (u~v) = e in b.bgpAS[v]) then None else
        let b = {b with bgpNextHop = match flipEdge e with | None -> {} | Some fe -> {fe}} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.10.0) && (prefix < 70.0.11.0))) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
if (isProtocol prot p_BGP) then
(Some {b with lp= 100; aslen= b.aslen + 1; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           let (u~v) = e in
           let b = {b with bgpAS = b.bgpAS[u := true]} in
      Some b))
   | _ -> None


let trans d edge x = 
  let o = transferOspf edge x.ospf in
  let b = transferBgp d edge x in
  {connected=None; static=None; ospf=o; bgp=b; selected=None}

nodes = (20, {
  15n:"edge-15";
  9n:"core-1";
  8n:"core-0";
  16n:"edge-18";
  3n:"aggregation-17";
  11n:"core-3";
  13n:"edge-11";
  2n:"aggregation-16";
  10n:"core-2";
  14n:"edge-14";
  17n:"edge-19";
  18n:"edge-6";
  19n:"edge-7";
  5n:"aggregation-5";
  4n:"aggregation-4";
  7n:"aggregation-9";
  6n:"aggregation-8";
  1n:"aggregation-13";
  0n:"aggregation-12";
  12n:"edge-10";
 })

edges = {
  (0-14,0); (*aggregation-12,Serial0 --> edge-14,Serial0*)
  (0-15,1); (*aggregation-12,Serial1 --> edge-15,Serial0*)
  (0-8,2); (*aggregation-12,Serial2 --> core-0,Serial2*)
  (0-9,3); (*aggregation-12,Serial3 --> core-1,Serial2*)
  (10-1,4); (*core-2,Serial2 --> aggregation-13,Serial2*)
  (10-3,5); (*core-2,Serial3 --> aggregation-17,Serial2*)
  (10-5,6); (*core-2,Serial0 --> aggregation-5,Serial2*)
  (10-7,7); (*core-2,Serial1 --> aggregation-9,Serial2*)
  (11-1,8); (*core-3,Serial2 --> aggregation-13,Serial3*)
  (11-3,9); (*core-3,Serial3 --> aggregation-17,Serial3*)
  (11-5,10); (*core-3,Serial0 --> aggregation-5,Serial3*)
  (11-7,11); (*core-3,Serial1 --> aggregation-9,Serial3*)
  (12-6,12); (*edge-10,Serial0 --> aggregation-8,Serial0*)
  (12-7,13); (*edge-10,Serial1 --> aggregation-9,Serial0*)
  (13-6,14); (*edge-11,Serial0 --> aggregation-8,Serial1*)
  (13-7,15); (*edge-11,Serial1 --> aggregation-9,Serial1*)
  (14-0,16); (*edge-14,Serial0 --> aggregation-12,Serial0*)
  (14-1,17); (*edge-14,Serial1 --> aggregation-13,Serial0*)
  (15-0,18); (*edge-15,Serial0 --> aggregation-12,Serial1*)
  (15-1,19); (*edge-15,Serial1 --> aggregation-13,Serial1*)
  (16-2,20); (*edge-18,Serial0 --> aggregation-16,Serial0*)
  (16-3,21); (*edge-18,Serial1 --> aggregation-17,Serial0*)
  (17-2,22); (*edge-19,Serial0 --> aggregation-16,Serial1*)
  (17-3,23); (*edge-19,Serial1 --> aggregation-17,Serial1*)
  (18-4,24); (*edge-6,Serial0 --> aggregation-4,Serial0*)
  (18-5,25); (*edge-6,Serial1 --> aggregation-5,Serial0*)
  (19-4,26); (*edge-7,Serial0 --> aggregation-4,Serial1*)
  (19-5,27); (*edge-7,Serial1 --> aggregation-5,Serial1*)
  (1-10,28); (*aggregation-13,Serial2 --> core-2,Serial2*)
  (1-11,29); (*aggregation-13,Serial3 --> core-3,Serial2*)
  (1-14,30); (*aggregation-13,Serial0 --> edge-14,Serial1*)
  (1-15,31); (*aggregation-13,Serial1 --> edge-15,Serial1*)
  (2-16,32); (*aggregation-16,Serial0 --> edge-18,Serial0*)
  (2-17,33); (*aggregation-16,Serial1 --> edge-19,Serial0*)
  (2-8,34); (*aggregation-16,Serial2 --> core-0,Serial3*)
  (2-9,35); (*aggregation-16,Serial3 --> core-1,Serial3*)
  (3-10,36); (*aggregation-17,Serial2 --> core-2,Serial3*)
  (3-11,37); (*aggregation-17,Serial3 --> core-3,Serial3*)
  (3-16,38); (*aggregation-17,Serial0 --> edge-18,Serial1*)
  (3-17,39); (*aggregation-17,Serial1 --> edge-19,Serial1*)
  (4-18,40); (*aggregation-4,Serial0 --> edge-6,Serial0*)
  (4-19,41); (*aggregation-4,Serial1 --> edge-7,Serial0*)
  (4-8,42); (*aggregation-4,Serial2 --> core-0,Serial0*)
  (4-9,43); (*aggregation-4,Serial3 --> core-1,Serial0*)
  (5-10,44); (*aggregation-5,Serial2 --> core-2,Serial0*)
  (5-11,45); (*aggregation-5,Serial3 --> core-3,Serial0*)
  (5-18,46); (*aggregation-5,Serial0 --> edge-6,Serial1*)
  (5-19,47); (*aggregation-5,Serial1 --> edge-7,Serial1*)
  (6-12,48); (*aggregation-8,Serial0 --> edge-10,Serial0*)
  (6-13,49); (*aggregation-8,Serial1 --> edge-11,Serial0*)
  (6-8,50); (*aggregation-8,Serial2 --> core-0,Serial1*)
  (6-9,51); (*aggregation-8,Serial3 --> core-1,Serial1*)
  (7-10,52); (*aggregation-9,Serial2 --> core-2,Serial1*)
  (7-11,53); (*aggregation-9,Serial3 --> core-3,Serial1*)
  (7-12,54); (*aggregation-9,Serial0 --> edge-10,Serial1*)
  (7-13,55); (*aggregation-9,Serial1 --> edge-11,Serial1*)
  (8-0,56); (*core-0,Serial2 --> aggregation-12,Serial2*)
  (8-2,57); (*core-0,Serial3 --> aggregation-16,Serial2*)
  (8-4,58); (*core-0,Serial0 --> aggregation-4,Serial2*)
  (8-6,59); (*core-0,Serial1 --> aggregation-8,Serial2*)
  (9-0,60); (*core-1,Serial2 --> aggregation-12,Serial3*)
  (9-2,61); (*core-1,Serial3 --> aggregation-16,Serial3*)
  (9-4,62); (*core-1,Serial0 --> aggregation-4,Serial3*)
  (9-6,63); (*core-1,Serial1 --> aggregation-8,Serial3*)
}

(*
{edge-15=15, core-1=9, core-0=8, edge-18=16, aggregation-17=3, core-3=11, edge-11=13, aggregation-16=2, core-2=10, edge-14=14, edge-19=17, edge-6=18, edge-7=19, aggregation-5=5, aggregation-4=4, aggregation-9=7, aggregation-8=6, aggregation-13=1, aggregation-12=0, edge-10=12}*)