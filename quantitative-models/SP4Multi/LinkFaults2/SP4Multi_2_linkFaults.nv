(* Bounded link faults *)

include "../SP4Multi_control.nv"

symbolic failures : int2 =
  | [0u2, 0u2] -> 0.9684988314739040p
  | [1u2, 1u2] -> 0.0310074663403317p
  | [2u2, 2u2] -> 0.0004886119008106p
  | _ -> 0.0p

symbolic f0 : tedge
symbolic f1 : tedge

let mergeLinkFaults u (x : [M]attribute) (y : [M]attribute) =
  merge u x y

let transLinkFaults d e (x : [M]attribute) =
  if (failures >u2 0u2) && ((f0 = e)|| (f1 = e)) then
    {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  else trans d e x

let initLinkFaults d u = init d u 

solution rib_70_0_6_0_24 = (initLinkFaults (70.0.6.0/24), transLinkFaults (70.0.6.0/24), mergeLinkFaults)

let initD u =
  match rib_70_0_6_0_24[u].bgp with
  | None -> None
  | Some b -> Some (size b.bgpNextHop true)

let transD e x = None

let merge u x y = 
match (x,y) with
| (None, _) -> y
| (_, None) -> x

solution debug = (initD, transD, merge)

assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[9n].bgp with | None -> true | Some b -> b.bgpNextHop = {9~17} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[0n].bgp with | None -> true | Some b -> b.bgpNextHop = {0~18} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[18n].bgp with | None -> true | Some b -> b.bgpNextHop = {18~1,18~3,18~9} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[17n].bgp with | None -> true | Some b -> b.bgpNextHop = {17~4,17~7} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[1n].bgp with | None -> true | Some b -> b.bgpNextHop = {1~14} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[3n].bgp with | None -> true | Some b -> b.bgpNextHop = {3~14} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[4n].bgp with | None -> true | Some b -> b.bgpNextHop = {4~13} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then match rib_70_0_6_0_24[7n].bgp with | None -> true | Some b -> b.bgpNextHop = {7~13} else true)
assert(if (f0=17~0) && (f1=11~14) && (failures=2u2) then debug[18n] = Some 4.0 else true)

(*
solution rib_70_0_7_0_24 = (initLinkFaults (70.0.7.0/24), transLinkFaults (70.0.7.0/24), mergeLinkFaults)

solution rib_70_0_10_0_24 = (initLinkFaults (70.0.10.0/24), transLinkFaults (70.0.10.0/24), mergeLinkFaults)

solution rib_70_0_11_0_24 = (initLinkFaults (70.0.11.0/24), transLinkFaults (70.0.11.0/24), mergeLinkFaults)

solution rib_70_0_14_0_24 = (initLinkFaults (70.0.14.0/24), transLinkFaults (70.0.14.0/24), mergeLinkFaults)

solution rib_70_0_15_0_24 = (initLinkFaults (70.0.15.0/24), transLinkFaults (70.0.15.0/24), mergeLinkFaults)

solution rib_70_0_18_0_24 = (initLinkFaults (70.0.18.0/24), transLinkFaults (70.0.18.0/24), mergeLinkFaults)

solution rib_70_0_19_0_24 = (initLinkFaults (70.0.19.0/24), transLinkFaults (70.0.19.0/24), mergeLinkFaults)
*)
