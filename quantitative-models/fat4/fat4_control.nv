(* models bgp, ospf, static routes, nexthop *)

type prefix = (int, int6) (* IP prefix; tuple of (address, length) *)
type ospfType = {ospfAd: int8; weight: int16; areaType:int2; areaId: int; ospfNextHop: option[tedge];}
type bgpType = {bgpAd: int8; lp: int; aslen: int; med:int; comms:set[int]; bgpNextHop: option[tedge];}
type rib = {
    connected:option[int8]; (* Just track administrative distance *)
    static:option[int8]; (* Just track administrative distance *)
    ospf:option[ospfType];
    bgp:option[bgpType];
    selected:option[int2]; (* Which protocol has the best route *) }
type attribute = rib

(* Definitions for the "best" field *)
let p_CONNECTED = 0u2
let p_STATIC = 1u2
let p_OSPF = 2u2
let p_BGP = 3u2

(** Useful helper definitions **)

let ospfIntraArea = 0u2
let ospfInterArea = 1u2
let ospfE1 = 2u2
let ospfE2 = 3u2

(* Check if the selected protocol is x *)
let isProtocol fib x =
  match fib with
  | None -> false
  | Some y -> x = y

let flipEdge e = 
  match e with  | a~b -> toEdge b a

let getSourceNode e = 
  match e with  | a~b -> a

let min x y = x <u8 y

(* Compute the better of x and y according to f *)
(* Return a boolean (true for x, false for y) for efficiency reasons *)
let pickOption f x y =
  match (x,y) with
  | (None, _) -> false  | (_, None) -> true
  | (Some a, Some b) -> f a b

let pickMinOption = pickOption min

(* OSPF Route ranking: first compare areas, then weights *)
let betterOspf o1 o2 =
  if o1.areaType <u2 o2.areaType then true
  else if o2.areaType <u2 o1.areaType then false
  else if o1.weight <=u16 o2.weight then true else false

let mergeOption f x y =
  match (x,y) with
  | (None, _) -> y  | (_, None) -> x
  | (Some a, Some b) -> Some (f a b)

(* BGP Route ranking: first compare local pref, then path length, then MED. 
       If multipath is disabled then tie-break is arbitrary (normally, the router id should be used) *)
let betterBgp multiPath b1 b2 =
  if b1.lp > b2.lp then b1
  else if b2.lp > b1.lp then b2
  else if b1.aslen < b2.aslen then b1
  else if b2.aslen < b1.aslen then b2
  else if b1.med < b2.med then b1
  else if b1.med > b2.med then b2
  else b1

(* Determine which of the four protocols has the best route by comparing their ADs *)
let best c s o b =
  match (c,s,o,b) with
  (* If no protocol has a route, then we have no route at all *)
  | (None,None,None,None) -> None
  | _ -> 
      (* Otherwise, get administrative distances for osfp and bgp... *)
      let o = match o with | None -> None | Some o -> Some o.ospfAd in
      let b = match b with | None -> None | Some b -> Some b.bgpAd in
      (* ...and figure out which of the protocols has the lowest AD *)
      let (x,p1) = if pickMinOption c s then (c,p_CONNECTED) else (s,p_STATIC) in
      let (y,p2) = if pickMinOption o b then (o,p_OSPF) else (b,p_BGP) in
      Some (if pickMinOption x y then p1 else p2)

(* Compute the best route for each protocol individually, then select the best one *)
let mergeValues bgpMultiPathEnabled x y =
  let c = if (pickMinOption x.connected y.connected) then x.connected else y.connected in
  let s = if (pickMinOption x.static y.static) then x.static else y.static in
  let o = if (pickOption betterOspf x.ospf y.ospf) then x.ospf else y.ospf in
  let b = mergeOption (betterBgp bgpMultiPathEnabled) x.bgp y.bgp in
  { connected = c;
    static = s;
    ospf = o;
    bgp = b;
    selected = best c s o b}

let merge node x y = mergeValues false x y

let init d node =
  match node with
  | 0n -> 
if d = (70.0.15.2/31) || d = (70.0.15.0/32) || d = (10.0.11.0/31) || d = (10.0.9.0/31) || d = (70.0.15.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.15.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 1n -> 
if d = (10.0.23.0/31) || d = (10.0.20.0/31) || d = (10.0.22.0/31) || d = (10.0.21.0/31) || d = (70.0.1.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 2n -> 
if d = (70.0.18.0/31) || d = (70.0.18.0/32) || d = (70.0.18.2/31) || d = (10.0.14.0/31) || d = (10.0.12.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.18.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 3n -> 
if d = (10.0.19.0/31) || d = (10.0.18.0/31) || d = (10.0.17.0/31) || d = (10.0.16.0/31) || d = (70.0.0.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 4n -> 
if d = (10.0.30.0/31) || d = (10.0.28.0/31) || d = (10.0.31.0/31) || d = (10.0.29.0/31) || d = (70.0.3.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 5n -> 
if d = (70.0.11.2/31) || d = (10.0.7.0/31) || d = (10.0.5.0/31) || d = (70.0.11.0/32) || d = (70.0.11.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.11.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 6n -> 
if d = (10.0.27.0/31) || d = (10.0.31.0/31) || d = (70.0.17.0/32) || d = (10.0.15.0/31) || d = (10.0.14.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 7n -> 
if d = (10.0.24.0/31) || d = (10.0.26.0/31) || d = (10.0.27.0/31) || d = (10.0.25.0/31) || d = (70.0.2.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 8n -> 
if d = (10.0.23.0/31) || d = (10.0.19.0/31) || d = (70.0.16.0/32) || d = (10.0.13.0/31) || d = (10.0.12.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 9n -> 
if d = (70.0.14.2/31) || d = (10.0.8.0/31) || d = (70.0.14.0/32) || d = (10.0.10.0/31) || d = (70.0.14.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.14.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 10n -> 
if d = (70.0.19.0/31) || d = (70.0.19.0/32) || d = (70.0.19.2/31) || d = (10.0.15.0/31) || d = (10.0.13.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.19.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 11n -> 
if d = (70.0.6.2/31) || d = (10.0.2.0/31) || d = (10.0.0.0/31) || d = (70.0.6.0/31) || d = (70.0.6.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.6.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 12n -> 
if d = (70.0.7.2/31) || d = (10.0.3.0/31) || d = (10.0.1.0/31) || d = (70.0.7.0/31) || d = (70.0.7.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.7.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 13n -> 
if d = (10.0.24.0/31) || d = (10.0.28.0/31) || d = (10.0.3.0/31) || d = (10.0.2.0/31) || d = (70.0.5.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 14n -> 
if d = (10.0.20.0/31) || d = (10.0.1.0/31) || d = (10.0.0.0/31) || d = (10.0.16.0/31) || d = (70.0.4.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 15n -> 
if d = (10.0.25.0/31) || d = (10.0.29.0/31) || d = (10.0.7.0/31) || d = (10.0.6.0/31) || d = (70.0.9.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 16n -> 
if d = (10.0.21.0/31) || d = (10.0.17.0/31) || d = (10.0.5.0/31) || d = (10.0.4.0/31) || d = (70.0.8.0/32) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 17n -> 
if d = (10.0.30.0/31) || d = (10.0.26.0/31) || d = (70.0.13.0/32) || d = (10.0.11.0/31) || d = (10.0.10.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 18n -> 
if d = (10.0.22.0/31) || d = (10.0.18.0/31) || d = (10.0.8.0/31) || d = (70.0.12.0/32) || d = (10.0.9.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | 19n -> 
if d = (70.0.10.2/31) || d = (10.0.6.0/31) || d = (10.0.4.0/31) || d = (70.0.10.0/32) || d = (70.0.10.0/31) then
    let c = Some 0u8 in
    let s = None in
    let o = None in
    let b = None in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else if d = (70.0.10.0/24) then
    let c = None in
    let s = Some 1u8 in
    let o = None in
    let b = Some {bgpAd=20u8; lp=100; aslen=0; med=80; comms={}; bgpNextHop=None} in
    let fib = best c s o b in
      {connected=c; static=s; ospf=o; bgp=b; selected=fib;}
     else {connected=None; static=None; ospf=None; bgp=None; selected=None;}
  | _ -> {connected=None; static=None; ospf=None; bgp=None; selected=None;}

 let transferOspf edge o =
   match o with
   | None -> None
   | Some o -> (
     match edge with
     | _ -> None)

 let transferBgp d e x0 =
  let (prefix, prefixLen) = d in
let prot = x0.selected in
 match e with
   | (0~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.15.0) && (prefix < 70.0.16.0))) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (0~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.15.0) && (prefix < 70.0.16.0))) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (1~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (1~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (1~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (1~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (2~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.18.0) && (prefix < 70.0.19.0))) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (2~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.18.0) && (prefix < 70.0.19.0))) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (3~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (3~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (3~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (3~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (4~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (4~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (4~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (4~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (5~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.11.0) && (prefix < 70.0.12.0))) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (5~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.11.0) && (prefix < 70.0.12.0))) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (6~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (6~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327683] then
None
 else
(Some b)))
   | (6~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (6~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327683] then
None
 else
(Some b)))
   | (7~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (7~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (7~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (7~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[196608] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[393216:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[196608:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (8~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (8~10) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327683] then
None
 else
(Some b)))
   | (8~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (8~2) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65539] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262147:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65539:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327683] then
None
 else
(Some b)))
   | (9~18) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.14.0) && (prefix < 70.0.15.0))) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (9~17) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.14.0) && (prefix < 70.0.15.0))) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131074] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327682:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131074:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262146] then
None
 else
(Some b)))
   | (10~8) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.19.0) && (prefix < 70.0.20.0))) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (10~6) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.19.0) && (prefix < 70.0.20.0))) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131075] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327683:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131075:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262147] then
None
 else
(Some b)))
   | (11~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.6.0) && (prefix < 70.0.7.0))) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (11~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.6.0) && (prefix < 70.0.7.0))) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (12~13) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.7.0) && (prefix < 70.0.8.0))) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (12~14) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.7.0) && (prefix < 70.0.8.0))) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131072] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327680:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131072:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262144] then
None
 else
(Some b)))
   | (13~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (13~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327680] then
None
 else
(Some b)))
   | (13~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327680] then
None
 else
(Some b)))
   | (13~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (14~12) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327680] then
None
 else
(Some b)))
   | (14~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (14~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (14~11) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65536] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262144:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65536:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327680] then
None
 else
(Some b)))
   | (15~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (15~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (15~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327681] then
None
 else
(Some b)))
   | (15~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327681] then
None
 else
(Some b)))
   | (16~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (16~19) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327681] then
None
 else
(Some b)))
   | (16~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (16~5) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65537] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262145:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65537:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327681] then
None
 else
(Some b)))
   | (17~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327682] then
None
 else
(Some b)))
   | (17~7) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (17~4) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (17~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327682] then
None
 else
(Some b)))
   | (18~1) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (18~3) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[393216] then
None
 else
(Some b)))
   | (18~0) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327682] then
None
 else
(Some b)))
   | (18~9) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if (isProtocol prot p_BGP) then
if b.comms[65538] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[262146:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[65538:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[327682] then
None
 else
(Some b)))
   | (19~16) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.10.0) && (prefix < 70.0.11.0))) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))
   | (19~15) ->
   let b = x0.bgp in
      (match b with
      | None -> None
      | Some b ->
        let b = {b with bgpNextHop = flipEdge e} in
     let b = 
           if ((prefixLen = 24u6) && ((prefix >= 70.0.10.0) && (prefix < 70.0.11.0))) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
if (isProtocol prot p_BGP) then
if b.comms[131073] then
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[327681:= true]; })
 else
(Some {b with lp= 100; aslen= b.aslen + 1; comms= b.comms[131073:= true]; })
 else
None
     in
         (match b with
         | None -> None
         | Some b ->
           if b.comms[262145] then
None
 else
(Some b)))


let trans d edge x = 
  let o = transferOspf edge x.ospf in
  let b = transferBgp d edge x in
  {connected=None; static=None; ospf=o; bgp=b; selected=None}

nodes = (20, {
  0n:"edge-15";
  1n:"core-1";
  2n:"edge-18";
  3n:"core-0";
  4n:"core-3";
  5n:"edge-11";
  6n:"aggregation-17";
  7n:"core-2";
  8n:"aggregation-16";
  9n:"edge-14";
  10n:"edge-19";
  11n:"edge-6";
  12n:"edge-7";
  13n:"aggregation-5";
  14n:"aggregation-4";
  15n:"aggregation-9";
  16n:"aggregation-8";
  17n:"aggregation-13";
  18n:"aggregation-12";
  19n:"edge-10";
 })

edges = {
  3-16; (*core-0,Serial0 --> aggregation-8,Serial0*)
  13-12; (*aggregation-5,Serial3 --> edge-7,Serial1*)
  8-1; (*aggregation-16,Serial1 --> core-1,Serial3*)
  6-7; (*aggregation-17,Serial3 --> core-2,Serial1*)
  19-16; (*edge-10,Serial0 --> aggregation-8,Serial2*)
  14-3; (*aggregation-4,Serial0 --> core-0,Serial2*)
  6-4; (*aggregation-17,Serial0 --> core-3,Serial1*)
  4-13; (*core-3,Serial2 --> aggregation-5,Serial1*)
  9-18; (*edge-14,Serial0 --> aggregation-12,Serial2*)
  17-0; (*aggregation-13,Serial3 --> edge-15,Serial1*)
  8-2; (*aggregation-16,Serial2 --> edge-18,Serial0*)
  3-14; (*core-0,Serial2 --> aggregation-4,Serial0*)
  18-3; (*aggregation-12,Serial0 --> core-0,Serial1*)
  1-8; (*core-1,Serial3 --> aggregation-16,Serial1*)
  7-15; (*core-2,Serial0 --> aggregation-9,Serial3*)
  15-5; (*aggregation-9,Serial2 --> edge-11,Serial1*)
  18-0; (*aggregation-12,Serial3 --> edge-15,Serial0*)
  10-8; (*edge-19,Serial0 --> aggregation-16,Serial3*)
  5-16; (*edge-11,Serial0 --> aggregation-8,Serial3*)
  6-2; (*aggregation-17,Serial1 --> edge-18,Serial1*)
  7-17; (*core-2,Serial3 --> aggregation-13,Serial0*)
  15-4; (*aggregation-9,Serial0 --> core-3,Serial0*)
  0-18; (*edge-15,Serial0 --> aggregation-12,Serial3*)
  7-6; (*core-2,Serial1 --> aggregation-17,Serial3*)
  16-5; (*aggregation-8,Serial3 --> edge-11,Serial0*)
  13-7; (*aggregation-5,Serial0 --> core-2,Serial2*)
  16-19; (*aggregation-8,Serial2 --> edge-10,Serial0*)
  14-11; (*aggregation-4,Serial2 --> edge-6,Serial0*)
  11-13; (*edge-6,Serial1 --> aggregation-5,Serial2*)
  3-18; (*core-0,Serial1 --> aggregation-12,Serial0*)
  9-17; (*edge-14,Serial1 --> aggregation-13,Serial2*)
  6-10; (*aggregation-17,Serial2 --> edge-19,Serial1*)
  13-4; (*aggregation-5,Serial1 --> core-3,Serial2*)
  2-6; (*edge-18,Serial1 --> aggregation-17,Serial1*)
  18-1; (*aggregation-12,Serial1 --> core-1,Serial1*)
  15-19; (*aggregation-9,Serial1 --> edge-10,Serial1*)
  1-14; (*core-1,Serial2 --> aggregation-4,Serial1*)
  2-8; (*edge-18,Serial0 --> aggregation-16,Serial2*)
  8-3; (*aggregation-16,Serial0 --> core-0,Serial3*)
  17-4; (*aggregation-13,Serial1 --> core-3,Serial3*)
  18-9; (*aggregation-12,Serial2 --> edge-14,Serial0*)
  0-17; (*edge-15,Serial1 --> aggregation-13,Serial3*)
  7-13; (*core-2,Serial2 --> aggregation-5,Serial0*)
  4-17; (*core-3,Serial3 --> aggregation-13,Serial1*)
  14-1; (*aggregation-4,Serial1 --> core-1,Serial2*)
  8-10; (*aggregation-16,Serial3 --> edge-19,Serial0*)
  10-6; (*edge-19,Serial1 --> aggregation-17,Serial2*)
  1-18; (*core-1,Serial1 --> aggregation-12,Serial1*)
  15-7; (*aggregation-9,Serial3 --> core-2,Serial0*)
  11-14; (*edge-6,Serial0 --> aggregation-4,Serial2*)
  12-13; (*edge-7,Serial1 --> aggregation-5,Serial3*)
  17-7; (*aggregation-13,Serial0 --> core-2,Serial3*)
  3-8; (*core-0,Serial3 --> aggregation-16,Serial0*)
  17-9; (*aggregation-13,Serial2 --> edge-14,Serial1*)
  13-11; (*aggregation-5,Serial2 --> edge-6,Serial1*)
  16-1; (*aggregation-8,Serial1 --> core-1,Serial0*)
  16-3; (*aggregation-8,Serial0 --> core-0,Serial0*)
  4-15; (*core-3,Serial0 --> aggregation-9,Serial0*)
  19-15; (*edge-10,Serial1 --> aggregation-9,Serial1*)
  12-14; (*edge-7,Serial0 --> aggregation-4,Serial3*)
  14-12; (*aggregation-4,Serial3 --> edge-7,Serial0*)
  1-16; (*core-1,Serial0 --> aggregation-8,Serial1*)
  4-6; (*core-3,Serial1 --> aggregation-17,Serial0*)
  5-15; (*edge-11,Serial1 --> aggregation-9,Serial2*)
}

(*
{edge-15=0, core-1=1, edge-18=2, core-0=3, core-3=4, edge-11=5, aggregation-17=6, core-2=7, aggregation-16=8, edge-14=9, edge-19=10, edge-6=11, edge-7=12, aggregation-5=13, aggregation-4=14, aggregation-9=15, aggregation-8=16, aggregation-13=17, aggregation-12=18, edge-10=19}*)